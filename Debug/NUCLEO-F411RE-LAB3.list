
NUCLEO-F411RE-LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006308  08006308  00016308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000098  08006400  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006400  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2e0  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de4  00000000  00000000  0002e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00030190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00030de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635c  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e149  00000000  00000000  00047d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d922  00000000  00000000  00055e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3777  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000e37c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062ec 	.word	0x080062ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	080062ec 	.word	0x080062ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	c = ComputeLowpassConstant(20, 500);
 8000e58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e5c:	2014      	movs	r0, #20
 8000e5e:	f000 fe05 	bl	8001a6c <ComputeLowpassConstant>
 8000e62:	eef0 7a40 	vmov.f32	s15, s0
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0x60>)
 8000e68:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fff0 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f82a 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 fa38 	bl	80012e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e78:	f000 fa16 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e7c:	f000 f9ea 	bl	8001254 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e80:	f000 f88a 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e84:	f000 f928 	bl	80010d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e88:	f000 f996 	bl	80011b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <main+0x64>)
 8000e8e:	f002 fb59 	bl	8003544 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <main+0x68>)
 8000e94:	f002 fb56 	bl	8003544 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <main+0x6c>)
 8000e9a:	f002 fbad 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <main+0x64>)
 8000ea2:	f002 fc65 	bl	8003770 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, IC_Buffer, IC_BUFFER_SIZE);
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <main+0x70>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <main+0x68>)
 8000eae:	f002 fd69 	bl	8003984 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <main+0x5e>
 8000eb4:	20000264 	.word	0x20000264
 8000eb8:	200000b4 	.word	0x200000b4
 8000ebc:	200000fc 	.word	0x200000fc
 8000ec0:	20000144 	.word	0x20000144
 8000ec4:	20000230 	.word	0x20000230

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fae4 	bl	80054a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemClock_Config+0xc8>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fe11 	bl	8002b74 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f58:	f000 fada 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2103      	movs	r1, #3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 f873 	bl	8003064 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f84:	f000 fac4 	bl	8001510 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3750      	adds	r7, #80	; 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	; 0x58
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2220      	movs	r2, #32
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fa67 	bl	80054a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000fd8:	4a3e      	ldr	r2, [pc, #248]	; (80010d4 <MX_TIM1_Init+0x13c>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2 - 1;
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500 - 1;
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000fea:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000fee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <MX_TIM1_Init+0x138>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001002:	4833      	ldr	r0, [pc, #204]	; (80010d0 <MX_TIM1_Init+0x138>)
 8001004:	f002 fa4e 	bl	80034a4 <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800100e:	f000 fa7f 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101c:	4619      	mov	r1, r3
 800101e:	482c      	ldr	r0, [pc, #176]	; (80010d0 <MX_TIM1_Init+0x138>)
 8001020:	f003 f8b2 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800102a:	f000 fa71 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <MX_TIM1_Init+0x138>)
 8001030:	f002 fb44 	bl	80036bc <HAL_TIM_PWM_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800103a:	f000 fa69 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104a:	4619      	mov	r1, r3
 800104c:	4820      	ldr	r0, [pc, #128]	; (80010d0 <MX_TIM1_Init+0x138>)
 800104e:	f003 fe69 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001058:	f000 fa5a 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_TIM1_Init+0x138>)
 8001082:	f002 ffbf 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800108c:	f000 fa40 	bl	8001510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM1_Init+0x138>)
 80010b4:	f003 fea4 	bl	8004e00 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80010be:	f000 fa27 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM1_Init+0x138>)
 80010c4:	f000 fdc8 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3758      	adds	r7, #88	; 0x58
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	40010000 	.word	0x40010000

080010d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_TIM2_Init+0xdc>)
 800110c:	2263      	movs	r2, #99	; 0x63
 800110e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112a:	4822      	ldr	r0, [pc, #136]	; (80011b4 <MX_TIM2_Init+0xdc>)
 800112c:	f002 f9ba 	bl	80034a4 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001136:	f000 f9eb 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4619      	mov	r1, r3
 8001146:	481b      	ldr	r0, [pc, #108]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001148:	f003 f81e 	bl	8004188 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001152:	f000 f9dd 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001158:	f002 fbba 	bl	80038d0 <HAL_TIM_IC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001162:	f000 f9d5 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <MX_TIM2_Init+0xdc>)
 8001176:	f003 fdd5 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001180:	f000 f9c6 	bl	8001510 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM2_Init+0xdc>)
 800119c:	f002 fe96 	bl	8003ecc <HAL_TIM_IC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011a6:	f000 f9b3 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000fc 	.word	0x200000fc

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM3_Init+0x94>)
 80011d6:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <MX_TIM3_Init+0x98>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4 - 1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_TIM3_Init+0x94>)
 80011dc:	2203      	movs	r2, #3
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM3_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000 - 1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM3_Init+0x94>)
 80011e8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80011ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_TIM3_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM3_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_TIM3_Init+0x94>)
 80011fc:	f002 f952 	bl	80034a4 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001206:	f000 f983 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM3_Init+0x94>)
 8001218:	f002 ffb6 	bl	8004188 <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f975 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM3_Init+0x94>)
 8001234:	f003 fd76 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 f967 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000144 	.word	0x20000144
 8001250:	40000400 	.word	0x40000400

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f003 fe1e 	bl	8004ecc <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f93b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001ec 	.word	0x200001ec
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_DMA_Init+0x3c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <MX_DMA_Init+0x3c>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_DMA_Init+0x3c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2010      	movs	r0, #16
 80012d0:	f000 ff0b 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f000 ff24 	bl	8002122 <HAL_NVIC_EnableIRQ>

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_GPIO_Init+0xfc>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_GPIO_Init+0xfc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <MX_GPIO_Init+0xfc>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_GPIO_Init+0xfc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	481d      	ldr	r0, [pc, #116]	; (80013e8 <MX_GPIO_Init+0x100>)
 8001374:	f001 fbe4 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI1_Pin|AI2_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_GPIO_Init+0x104>)
 8001380:	f001 fbde 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4815      	ldr	r0, [pc, #84]	; (80013f0 <MX_GPIO_Init+0x108>)
 800139c:	f001 fa4c 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a0:	2320      	movs	r3, #32
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_GPIO_Init+0x100>)
 80013b8:	f001 fa3e 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI1_Pin AI2_Pin */
  GPIO_InitStruct.Pin = AI1_Pin|AI2_Pin;
 80013bc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_GPIO_Init+0x104>)
 80013d6:	f001 fa2f 	bl	8002838 <HAL_GPIO_Init>

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800

080013f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b095      	sub	sp, #84	; 0x54
 80013f8:	af10      	add	r7, sp, #64	; 0x40
 80013fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3a      	ldr	r2, [pc, #232]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d16d      	bne.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xee>
	{
		float RPM_Raw = MotorReadRPM(htim2, IC_Buffer);
 8001406:	4e3a      	ldr	r6, [pc, #232]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001408:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800140a:	930e      	str	r3, [sp, #56]	; 0x38
 800140c:	466d      	mov	r5, sp
 800140e:	f106 0410 	add.w	r4, r6, #16
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001422:	e885 0003 	stmia.w	r5, {r0, r1}
 8001426:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800142a:	f000 f987 	bl	800173c <MotorReadRPM>
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
		if (1 / RPM_Raw != 0 && PWM_Duty_Cycle != 0) RPM = (c * RPM_Raw) + ((1 - c) * RPM);
 8001432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001436:	ed97 7a03 	vldr	s14, [r7, #12]
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d020      	beq.n	800148a <HAL_TIM_PeriodElapsedCallback+0x96>
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d018      	beq.n	800148a <HAL_TIM_PeriodElapsedCallback+0x96>
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001470:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001484:	edc3 7a00 	vstr	s15, [r3]
 8001488:	e003      	b.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x9e>
		else RPM = 0;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

		if (MotorControlEnable == GPIO_PIN_SET) MotorControlRPM(M1, MotorSetRPM, RPM);
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0xce>
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	466c      	mov	r4, sp
 80014aa:	f103 0210 	add.w	r2, r3, #16
 80014ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f000 f994 	bl	80017e8 <MotorControlRPM>
		else MotorSetDuty(M1, PWM_Duty_Cycle);
	}
}
 80014c0:	e00f      	b.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xee>
		else MotorSetDuty(M1, PWM_Duty_Cycle);
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014ca:	466c      	mov	r4, sp
 80014cc:	f103 0210 	add.w	r2, r3, #16
 80014d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80014d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f000 f81d 	bl	800151c <MotorSetDuty>
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	200000fc 	.word	0x200000fc
 80014f4:	20000230 	.word	0x20000230
 80014f8:	2000025c 	.word	0x2000025c
 80014fc:	20000264 	.word	0x20000264
 8001500:	20000260 	.word	0x20000260
 8001504:	20000000 	.word	0x20000000
 8001508:	20000258 	.word	0x20000258
 800150c:	20000004 	.word	0x20000004

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <MotorSetDuty>:
float dt = 1 / 500.0;
// USER DEFINE VARIABLE BEGIN

// USER DEFINE FUNCTION BEGIN
void MotorSetDuty(MOTOR_Structure Mx, float DutyCycle)
{
 800151c:	b084      	sub	sp, #16
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	f107 0c10 	add.w	ip, r7, #16
 8001528:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800152c:	ed87 0a01 	vstr	s0, [r7, #4]
	if (DutyCycle >= 0) {
 8001530:	edd7 7a01 	vldr	s15, [r7, #4]
 8001534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	db6c      	blt.n	8001618 <MotorSetDuty+0xfc>
		HAL_GPIO_WritePin(Mx.I1.Port, Mx.I1.Pin, GPIO_PIN_SET);
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	8bb9      	ldrh	r1, [r7, #28]
 8001542:	2201      	movs	r2, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fafb 	bl	8002b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Mx.I2.Port, Mx.I2.Pin, GPIO_PIN_RESET);
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800154e:	2200      	movs	r2, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f001 faf5 	bl	8002b40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 8001556:	8abb      	ldrh	r3, [r7, #20]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d115      	bne.n	8001588 <MotorSetDuty+0x6c>
 800155c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	b29b      	uxth	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	3301      	adds	r3, #1
 8001574:	fb03 f202 	mul.w	r2, r3, r2
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	496c      	ldr	r1, [pc, #432]	; (8001730 <MotorSetDuty+0x214>)
 800157e:	fba1 1202 	umull	r1, r2, r1, r2
 8001582:	0952      	lsrs	r2, r2, #5
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		HAL_GPIO_WritePin(Mx.I1.Port, Mx.I1.Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Mx.I2.Port, Mx.I2.Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) -1 * DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
	}
}
 8001586:	e0cc      	b.n	8001722 <MotorSetDuty+0x206>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 8001588:	8abb      	ldrh	r3, [r7, #20]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d115      	bne.n	80015ba <MotorSetDuty+0x9e>
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	3301      	adds	r3, #1
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	4960      	ldr	r1, [pc, #384]	; (8001730 <MotorSetDuty+0x214>)
 80015b0:	fba1 1303 	umull	r1, r3, r1, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38
 80015b8:	e0b3      	b.n	8001722 <MotorSetDuty+0x206>
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d115      	bne.n	80015ec <MotorSetDuty+0xd0>
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c8:	ee17 3a90 	vmov	r3, s15
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	3301      	adds	r3, #1
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	4953      	ldr	r1, [pc, #332]	; (8001730 <MotorSetDuty+0x214>)
 80015e2:	fba1 1303 	umull	r1, r3, r1, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80015ea:	e09a      	b.n	8001722 <MotorSetDuty+0x206>
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f4:	ee17 3a90 	vmov	r3, s15
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	3301      	adds	r3, #1
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	4948      	ldr	r1, [pc, #288]	; (8001730 <MotorSetDuty+0x214>)
 800160e:	fba1 1303 	umull	r1, r3, r1, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001616:	e084      	b.n	8001722 <MotorSetDuty+0x206>
		HAL_GPIO_WritePin(Mx.I1.Port, Mx.I1.Pin, GPIO_PIN_RESET);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	8bb9      	ldrh	r1, [r7, #28]
 800161c:	2200      	movs	r2, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fa8e 	bl	8002b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Mx.I2.Port, Mx.I2.Pin, GPIO_PIN_SET);
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001628:	2201      	movs	r2, #1
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fa88 	bl	8002b40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) -1 * DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 8001630:	8abb      	ldrh	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11b      	bne.n	800166e <MotorSetDuty+0x152>
 8001636:	edd7 7a01 	vldr	s15, [r7, #4]
 800163a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001734 <MotorSetDuty+0x218>
 800163e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	3301      	adds	r3, #1
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001738 <MotorSetDuty+0x21c>
 800165a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001666:	ee17 2a90 	vmov	r2, s15
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800166c:	e059      	b.n	8001722 <MotorSetDuty+0x206>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) -1 * DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 800166e:	8abb      	ldrh	r3, [r7, #20]
 8001670:	2b04      	cmp	r3, #4
 8001672:	d11b      	bne.n	80016ac <MotorSetDuty+0x190>
 8001674:	edd7 7a01 	vldr	s15, [r7, #4]
 8001678:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001734 <MotorSetDuty+0x218>
 800167c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	3301      	adds	r3, #1
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001694:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001738 <MotorSetDuty+0x21c>
 8001698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a4:	ee17 3a90 	vmov	r3, s15
 80016a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016aa:	e03a      	b.n	8001722 <MotorSetDuty+0x206>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) -1 * DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 80016ac:	8abb      	ldrh	r3, [r7, #20]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11b      	bne.n	80016ea <MotorSetDuty+0x1ce>
 80016b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001734 <MotorSetDuty+0x218>
 80016ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	3301      	adds	r3, #1
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001738 <MotorSetDuty+0x21c>
 80016d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80016e8:	e01b      	b.n	8001722 <MotorSetDuty+0x206>
		__HAL_TIM_SET_COMPARE(Mx.htim, Mx.TIM_CHANNEL, (uint16_t) -1 * DutyCycle * (__HAL_TIM_GET_AUTORELOAD(Mx.htim) + 1) / 100);
 80016ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001734 <MotorSetDuty+0x218>
 80016f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	3301      	adds	r3, #1
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001738 <MotorSetDuty+0x21c>
 800170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171a:	ee17 3a90 	vmov	r3, s15
 800171e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001720:	e7ff      	b.n	8001722 <MotorSetDuty+0x206>
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800172c:	b004      	add	sp, #16
 800172e:	4770      	bx	lr
 8001730:	51eb851f 	.word	0x51eb851f
 8001734:	477fff00 	.word	0x477fff00
 8001738:	42c80000 	.word	0x42c80000

0800173c <MotorReadRPM>:

float MotorReadRPM(TIM_HandleTypeDef htimx, uint32_t *Buffer)
{
 800173c:	b084      	sub	sp, #16
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	f107 0c10 	add.w	ip, r7, #16
 8001748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int CurrentDMAPointer = (IC_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(htimx.hdma[1]) - 1 + IC_BUFFER_SIZE) % IC_BUFFER_SIZE;
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f1c3 0113 	rsb	r1, r3, #19
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MotorReadRPM+0x98>)
 8001758:	fba3 2301 	umull	r2, r3, r3, r1
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	1aca      	subs	r2, r1, r3
 8001768:	607a      	str	r2, [r7, #4]
	int PreviousDMAPointer = (CurrentDMAPointer - 1 + IC_BUFFER_SIZE) % IC_BUFFER_SIZE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f103 0209 	add.w	r2, r3, #9
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MotorReadRPM+0x9c>)
 8001772:	fb83 1302 	smull	r1, r3, r3, r2
 8001776:	1099      	asrs	r1, r3, #2
 8001778:	17d3      	asrs	r3, r2, #31
 800177a:	1ac9      	subs	r1, r1, r3
 800177c:	460b      	mov	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	603b      	str	r3, [r7, #0]
	return 1.0e6 * 60.0 / ((float) (Buffer[CurrentDMAPointer] - Buffer[PreviousDMAPointer]) * GEAR_RATIO * PULSE_PER_REVOLUTION);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800178e:	4413      	add	r3, r2
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001798:	440b      	add	r3, r1
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80017dc <MotorReadRPM+0xa0>
 80017aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ae:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017e0 <MotorReadRPM+0xa4>
 80017ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017be:	eef0 7a66 	vmov.f32	s15, s13
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	b004      	add	sp, #16
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	cccccccd 	.word	0xcccccccd
 80017d8:	66666667 	.word	0x66666667
 80017dc:	42800000 	.word	0x42800000
 80017e0:	4c64e1c0 	.word	0x4c64e1c0
 80017e4:	00000000 	.word	0x00000000

080017e8 <MotorControlRPM>:

void MotorControlRPM(MOTOR_Structure Mx, int SetRPM, float InRPM)
{
 80017e8:	b084      	sub	sp, #16
 80017ea:	b5b0      	push	{r4, r5, r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af02      	add	r7, sp, #8
 80017f0:	f107 0418 	add.w	r4, r7, #24
 80017f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017f8:	ed87 0a01 	vstr	s0, [r7, #4]
	static int Prev_SetRPM = 0;

	error = SetRPM - InRPM;
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001806:	edd7 7a01 	vldr	s15, [r7, #4]
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <MotorControlRPM+0x260>)
 8001810:	edc3 7a00 	vstr	s15, [r3]

	if (SetRPM != Prev_SetRPM) integral_error = 0;
 8001814:	4b8d      	ldr	r3, [pc, #564]	; (8001a4c <MotorControlRPM+0x264>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181a:	429a      	cmp	r2, r3
 800181c:	d003      	beq.n	8001826 <MotorControlRPM+0x3e>
 800181e:	4b8c      	ldr	r3, [pc, #560]	; (8001a50 <MotorControlRPM+0x268>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	if (!(PWM_Duty_Cycle >= 100 && (((error >= 0) && (integral_error >= 0)) || ((error < 0) && (integral_error < 0))))) integral_error += error * dt;
 8001826:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <MotorControlRPM+0x26c>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001a58 <MotorControlRPM+0x270>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	bfac      	ite	ge
 800183a:	2301      	movge	r3, #1
 800183c:	2300      	movlt	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13f      	bne.n	80018ca <MotorControlRPM+0xe2>
 800184a:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <MotorControlRPM+0x260>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	bfac      	ite	ge
 800185a:	2301      	movge	r3, #1
 800185c:	2300      	movlt	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <MotorControlRPM+0xa2>
 800186a:	4b79      	ldr	r3, [pc, #484]	; (8001a50 <MotorControlRPM+0x268>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	bfac      	ite	ge
 800187a:	2301      	movge	r3, #1
 800187c:	2300      	movlt	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02f      	beq.n	80018ea <MotorControlRPM+0x102>
 800188a:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <MotorControlRPM+0x260>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	bf4c      	ite	mi
 800189a:	2301      	movmi	r3, #1
 800189c:	2300      	movpl	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <MotorControlRPM+0xe2>
 80018aa:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <MotorControlRPM+0x268>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	bf4c      	ite	mi
 80018ba:	2301      	movmi	r3, #1
 80018bc:	2300      	movpl	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f083 0301 	eor.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00f      	beq.n	80018ea <MotorControlRPM+0x102>
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <MotorControlRPM+0x260>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <MotorControlRPM+0x274>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <MotorControlRPM+0x268>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <MotorControlRPM+0x268>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]

	PWM_Duty_Cycle = ((-0.0311 * pow(SetRPM, 2)) + (4.23 * SetRPM) + 2.5095) + (Kp * error) + (Ki * integral_error);
 80018ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018ec:	f7fe fdc6 	bl	800047c <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001a28 <MotorControlRPM+0x240>
 80018f8:	ec43 2b10 	vmov	d0, r2, r3
 80018fc:	f003 fdda 	bl	80054b4 <pow>
 8001900:	ec51 0b10 	vmov	r0, r1, d0
 8001904:	a34a      	add	r3, pc, #296	; (adr r3, 8001a30 <MotorControlRPM+0x248>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe21 	bl	8000550 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001918:	f7fe fdb0 	bl	800047c <__aeabi_i2d>
 800191c:	a346      	add	r3, pc, #280	; (adr r3, 8001a38 <MotorControlRPM+0x250>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe15 	bl	8000550 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fc59 	bl	80001e4 <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	a341      	add	r3, pc, #260	; (adr r3, 8001a40 <MotorControlRPM+0x258>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fc50 	bl	80001e4 <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <MotorControlRPM+0x278>)
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <MotorControlRPM+0x260>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	ee17 0a90 	vmov	r0, s15
 8001960:	f7fe fd9e 	bl	80004a0 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fc3a 	bl	80001e4 <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <MotorControlRPM+0x27c>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <MotorControlRPM+0x268>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	ee17 0a90 	vmov	r0, s15
 800198c:	f7fe fd88 	bl	80004a0 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fc24 	bl	80001e4 <__adddf3>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f884 	bl	8000ab0 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <MotorControlRPM+0x26c>)
 80019ac:	6013      	str	r3, [r2, #0]

	if (PWM_Duty_Cycle > 100) PWM_Duty_Cycle = 100;
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <MotorControlRPM+0x26c>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a58 <MotorControlRPM+0x270>
 80019b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	dd03      	ble.n	80019ca <MotorControlRPM+0x1e2>
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <MotorControlRPM+0x26c>)
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <MotorControlRPM+0x280>)
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e00b      	b.n	80019e2 <MotorControlRPM+0x1fa>
	else if (PWM_Duty_Cycle < 0) PWM_Duty_Cycle = 0;
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <MotorControlRPM+0x26c>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d503      	bpl.n	80019e2 <MotorControlRPM+0x1fa>
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <MotorControlRPM+0x26c>)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

	if (SetRPM == 0) PWM_Duty_Cycle = 0;
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d103      	bne.n	80019f0 <MotorControlRPM+0x208>
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MotorControlRPM+0x26c>)
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

	MotorSetDuty(Mx, PWM_Duty_Cycle);
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MotorControlRPM+0x26c>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	466a      	mov	r2, sp
 80019f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a00:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	f7ff fd85 	bl	800151c <MotorSetDuty>
	Prev_SetRPM = SetRPM;
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <MotorControlRPM+0x264>)
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a22:	b004      	add	sp, #16
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40000000 	.word	0x40000000
 8001a30:	ab9f559b 	.word	0xab9f559b
 8001a34:	bf9fd8ad 	.word	0xbf9fd8ad
 8001a38:	1eb851ec 	.word	0x1eb851ec
 8001a3c:	4010eb85 	.word	0x4010eb85
 8001a40:	bc6a7efa 	.word	0xbc6a7efa
 8001a44:	40041374 	.word	0x40041374
 8001a48:	20000268 	.word	0x20000268
 8001a4c:	20000270 	.word	0x20000270
 8001a50:	2000026c 	.word	0x2000026c
 8001a54:	2000025c 	.word	0x2000025c
 8001a58:	42c80000 	.word	0x42c80000
 8001a5c:	20000024 	.word	0x20000024
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000020 	.word	0x20000020
 8001a68:	42c80000 	.word	0x42c80000

08001a6c <ComputeLowpassConstant>:

float ComputeLowpassConstant(uint16_t CutoffFreq, uint16_t SamplingFreq)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	460a      	mov	r2, r1
 8001a76:	80fb      	strh	r3, [r7, #6]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	80bb      	strh	r3, [r7, #4]
	return CutoffFreq / ((float) (CutoffFreq + SamplingFreq));
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a98:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_MspInit+0x4c>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aea:	2007      	movs	r0, #7
 8001aec:	f000 faf2 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_TIM_Base_MspInit+0x144>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10e      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3a:	e07d      	b.n	8001c38 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d15d      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a36      	ldr	r2, [pc, #216]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_PIN_Pin;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	482b      	ldr	r0, [pc, #172]	; (8001c48 <HAL_TIM_Base_MspInit+0x14c>)
 8001b9a:	f000 fe4d 	bl	8002838 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_TIM_Base_MspInit+0x154>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001ba6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001be6:	f000 fab7 	bl	8002158 <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8001bf0:	f7ff fc8e 	bl	8001510 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_TIM_Base_MspInit+0x150>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c00:	e01a      	b.n	8001c38 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM3)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_TIM_Base_MspInit+0x158>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d115      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_TIM_Base_MspInit+0x148>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	201d      	movs	r0, #29
 8001c2e:	f000 fa5c 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c32:	201d      	movs	r0, #29
 8001c34:	f000 fa75 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 8001c38:	bf00      	nop
 8001c3a:	3730      	adds	r7, #48	; 0x30
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	2000018c 	.word	0x2000018c
 8001c50:	40026088 	.word	0x40026088
 8001c54:	40000400 	.word	0x40000400

08001c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_MspPostInit+0x68>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_MspPostInit+0x6c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_PIN_Pin;
 8001c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PIN_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_TIM_MspPostInit+0x70>)
 8001cb4:	f000 fdc0 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_UART_MspInit+0x84>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12b      	bne.n	8001d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_UART_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d26:	230c      	movs	r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_UART_MspInit+0x8c>)
 8001d42:	f000 fd79 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 f8a4 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA1_Stream5_IRQHandler+0x10>)
 8001db6:	f000 fad5 	bl	8002364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000018c 	.word	0x2000018c

08001dc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM3_IRQHandler+0x10>)
 8001dca:	f001 ff77 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000144 	.word	0x20000144

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e18:	4c0b      	ldr	r4, [pc, #44]	; (8001e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e26:	f7ff ffd7 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 fb17 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7ff f811 	bl	8000e54 <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001e40:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 8001e44:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001e48:	20000278 	.word	0x20000278

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_Init+0x40>)
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_Init+0x40>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_Init+0x40>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f92b 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fe12 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f943 	bl	800213e <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f90b 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000028 	.word	0x20000028
 8001eec:	20000030 	.word	0x20000030
 8001ef0:	2000002c 	.word	0x2000002c

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000030 	.word	0x20000030
 8001f18:	20000274 	.word	0x20000274

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000274 	.word	0x20000274

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff3e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff31 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff feda 	bl	8001f1c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e099      	b.n	80022a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	e00f      	b.n	80021b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002196:	f7ff fec1 	bl	8001f1c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d908      	bls.n	80021b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e078      	b.n	80022a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e8      	bne.n	8002196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_DMA_Init+0x158>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b04      	cmp	r3, #4
 800220e:	d107      	bne.n	8002220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4313      	orrs	r3, r2
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0307 	bic.w	r3, r3, #7
 8002236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b04      	cmp	r3, #4
 8002248:	d117      	bne.n	800227a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa6f 	bl	8002740 <DMA_CheckFifoParam>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002276:	2301      	movs	r3, #1
 8002278:	e016      	b.n	80022a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa26 	bl	80026d4 <DMA_CalcBaseAndBitshift>
 8002288:	4603      	mov	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	f010803f 	.word	0xf010803f

080022b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_DMA_Start_IT+0x26>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e040      	b.n	800235c <HAL_DMA_Start_IT+0xa8>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12f      	bne.n	800234e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f9b8 	bl	8002678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	223f      	movs	r2, #63	; 0x3f
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0216 	orr.w	r2, r2, #22
 8002322:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e005      	b.n	800235a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002370:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_DMA_IRQHandler+0x248>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a8e      	ldr	r2, [pc, #568]	; (80025b0 <HAL_DMA_IRQHandler+0x24c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a9b      	lsrs	r3, r3, #10
 800237c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2208      	movs	r2, #8
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2208      	movs	r2, #8
 80023be:	409a      	lsls	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	2201      	movs	r2, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2201      	movs	r2, #1
 80023f4:	409a      	lsls	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2204      	movs	r2, #4
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2204      	movs	r2, #4
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2210      	movs	r2, #16
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d043      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03c      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2210      	movs	r2, #16
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d024      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e01f      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2220      	movs	r2, #32
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 808f 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8087 	beq.w	8002604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2220      	movs	r2, #32
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d136      	bne.n	800257c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0216 	bic.w	r2, r2, #22
 800251c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800252c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_DMA_IRQHandler+0x1da>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	223f      	movs	r2, #63	; 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07e      	beq.n	8002670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
        }
        return;
 800257a:	e079      	b.n	8002670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01d      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	2b00      	cmp	r3, #0
 800259e:	d031      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
 80025a8:	e02c      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
 80025aa:	bf00      	nop
 80025ac:	20000028 	.word	0x20000028
 80025b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e01e      	b.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	2b00      	cmp	r3, #0
 800260a:	d032      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d022      	beq.n	800265e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2205      	movs	r2, #5
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3301      	adds	r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d307      	bcc.n	800264c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f2      	bne.n	8002630 <HAL_DMA_IRQHandler+0x2cc>
 800264a:	e000      	b.n	800264e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800264c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
 800266e:	e000      	b.n	8002672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002670:	bf00      	nop
    }
  }
}
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d108      	bne.n	80026b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b6:	e007      	b.n	80026c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b10      	subs	r3, #16
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <DMA_CalcBaseAndBitshift+0x64>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <DMA_CalcBaseAndBitshift+0x68>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d909      	bls.n	8002716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	659a      	str	r2, [r3, #88]	; 0x58
 8002714:	e007      	b.n	8002726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	aaaaaaab 	.word	0xaaaaaaab
 800273c:	08006320 	.word	0x08006320

08002740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11f      	bne.n	800279a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d856      	bhi.n	800280e <DMA_CheckFifoParam+0xce>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <DMA_CheckFifoParam+0x28>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	0800278b 	.word	0x0800278b
 8002770:	08002779 	.word	0x08002779
 8002774:	0800280f 	.word	0x0800280f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d046      	beq.n	8002812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e043      	b.n	8002812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002792:	d140      	bne.n	8002816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e03d      	b.n	8002816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d121      	bne.n	80027e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d837      	bhi.n	800281a <DMA_CheckFifoParam+0xda>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <DMA_CheckFifoParam+0x70>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c7 	.word	0x080027c7
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	080027d9 	.word	0x080027d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e030      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d025      	beq.n	800281e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e022      	b.n	800281e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e0:	d11f      	bne.n	8002822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e6:	e01c      	b.n	8002822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d903      	bls.n	80027f6 <DMA_CheckFifoParam+0xb6>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d003      	beq.n	80027fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f4:	e018      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      break;
 80027fa:	e015      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e00b      	b.n	8002826 <DMA_CheckFifoParam+0xe6>
      break;
 800280e:	bf00      	nop
 8002810:	e00a      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e008      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e006      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e004      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;   
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
    }
  } 
  
  return status; 
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e159      	b.n	8002b08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8148 	bne.w	8002b02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a2 	beq.w	8002b02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x1fe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a47      	ldr	r2, [pc, #284]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x1fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a46      	ldr	r2, [pc, #280]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x1f6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a45      	ldr	r2, [pc, #276]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x1f2>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4935      	ldr	r1, [pc, #212]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa8:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002afc:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <HAL_GPIO_Init+0x304>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f aea2 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e267      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d075      	beq.n	8002c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d112      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05b      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d157      	bne.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e242      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x74>
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a75      	ldr	r2, [pc, #468]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6f      	ldr	r2, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6c      	ldr	r2, [pc, #432]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f976 	bl	8001f1c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff f972 	bl	8001f1c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e207      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7ff f962 	bl	8001f1c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7ff f95e 	bl	8001f1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1f3      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d063      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e1c7      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4937      	ldr	r1, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	e03a      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCC_OscConfig+0x244>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7ff f917 	bl	8001f1c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7ff f913 	bl	8001f1c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1a8      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4925      	ldr	r1, [pc, #148]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_OscConfig+0x244>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7ff f8f6 	bl	8001f1c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d34:	f7ff f8f2 	bl	8001f1c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e187      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d036      	beq.n	8002dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCC_OscConfig+0x248>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7ff f8d6 	bl	8001f1c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d74:	f7ff f8d2 	bl	8001f1c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e167      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x200>
 8002d92:	e01b      	b.n	8002dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_OscConfig+0x248>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f8bf 	bl	8001f1c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	e00e      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da2:	f7ff f8bb 	bl	8001f1c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d907      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e150      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	42470000 	.word	0x42470000
 8002dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ea      	bne.n	8002da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8097 	beq.w	8002f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b7d      	ldr	r3, [pc, #500]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b77      	ldr	r3, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b74      	ldr	r3, [pc, #464]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a73      	ldr	r2, [pc, #460]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7ff f87b 	bl	8001f1c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2a:	f7ff f877 	bl	8001f1c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e10c      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x474>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2ea>
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a63      	ldr	r2, [pc, #396]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	e01c      	b.n	8002e98 <HAL_RCC_OscConfig+0x324>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x30c>
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0x324>
 8002e80:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a57      	ldr	r2, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7ff f83c 	bl	8001f1c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7ff f838 	bl	8001f1c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0cb      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7ff f826 	bl	8001f1c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7ff f822 	bl	8001f1c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0b5      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eea:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1ee      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a1 	beq.w	8003054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d05c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d141      	bne.n	8002faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fff6 	bl	8001f1c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fff2 	bl	8001f1c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e087      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe ffcb 	bl	8001f1c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe ffc7 	bl	8001f1c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e05c      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x416>
 8002fa8:	e054      	b.n	8003054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x478>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe ffb4 	bl	8001f1c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe ffb0 	bl	8001f1c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e045      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
 8002fd6:	e03d      	b.n	8003054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e038      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4ec>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d028      	beq.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d121      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d11a      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0cc      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d90c      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b8      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	494d      	ldr	r1, [pc, #308]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d044      	beq.n	8003184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d119      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d003      	beq.n	8003122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	2b03      	cmp	r3, #3
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e067      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003142:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4934      	ldr	r1, [pc, #208]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7fe fee2 	bl	8001f1c <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	e00a      	b.n	8003172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7fe fede 	bl	8001f1c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 020c 	and.w	r2, r3, #12
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	429a      	cmp	r2, r3
 8003182:	d1eb      	bne.n	800315c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d20c      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e032      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f821 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fe42 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00
 8003220:	40023800 	.word	0x40023800
 8003224:	08006308 	.word	0x08006308
 8003228:	20000028 	.word	0x20000028
 800322c:	2000002c 	.word	0x2000002c

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003234:	b094      	sub	sp, #80	; 0x50
 8003236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
 800323c:	2300      	movs	r3, #0
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	2300      	movs	r3, #0
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4b79      	ldr	r3, [pc, #484]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d00d      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x40>
 8003254:	2b08      	cmp	r3, #8
 8003256:	f200 80e1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x1ec>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x34>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x3a>
 8003262:	e0db      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003268:	e0db      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_GetSysClockFreq+0x208>)
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326e:	e0d8      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327a:	4b6d      	ldr	r3, [pc, #436]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d063      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
 800329e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b4:	0150      	lsls	r0, r2, #5
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4621      	mov	r1, r4
 80032bc:	1a51      	subs	r1, r2, r1
 80032be:	6139      	str	r1, [r7, #16]
 80032c0:	4629      	mov	r1, r5
 80032c2:	eb63 0301 	sbc.w	r3, r3, r1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d4:	4659      	mov	r1, fp
 80032d6:	018b      	lsls	r3, r1, #6
 80032d8:	4651      	mov	r1, sl
 80032da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032de:	4651      	mov	r1, sl
 80032e0:	018a      	lsls	r2, r1, #6
 80032e2:	4651      	mov	r1, sl
 80032e4:	ebb2 0801 	subs.w	r8, r2, r1
 80032e8:	4659      	mov	r1, fp
 80032ea:	eb63 0901 	sbc.w	r9, r3, r1
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003302:	4690      	mov	r8, r2
 8003304:	4699      	mov	r9, r3
 8003306:	4623      	mov	r3, r4
 8003308:	eb18 0303 	adds.w	r3, r8, r3
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	462b      	mov	r3, r5
 8003310:	eb49 0303 	adc.w	r3, r9, r3
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003322:	4629      	mov	r1, r5
 8003324:	024b      	lsls	r3, r1, #9
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800332c:	4621      	mov	r1, r4
 800332e:	024a      	lsls	r2, r1, #9
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
 800333a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800333c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003340:	f7fd fc06 	bl	8000b50 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	e058      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	4611      	mov	r1, r2
 800335a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	0159      	lsls	r1, r3, #5
 8003376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337a:	0150      	lsls	r0, r2, #5
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4641      	mov	r1, r8
 8003382:	ebb2 0a01 	subs.w	sl, r2, r1
 8003386:	4649      	mov	r1, r9
 8003388:	eb63 0b01 	sbc.w	fp, r3, r1
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800339c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a0:	ebb2 040a 	subs.w	r4, r2, sl
 80033a4:	eb63 050b 	sbc.w	r5, r3, fp
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	00eb      	lsls	r3, r5, #3
 80033b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b6:	00e2      	lsls	r2, r4, #3
 80033b8:	4614      	mov	r4, r2
 80033ba:	461d      	mov	r5, r3
 80033bc:	4643      	mov	r3, r8
 80033be:	18e3      	adds	r3, r4, r3
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	464b      	mov	r3, r9
 80033c4:	eb45 0303 	adc.w	r3, r5, r3
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d6:	4629      	mov	r1, r5
 80033d8:	028b      	lsls	r3, r1, #10
 80033da:	4621      	mov	r1, r4
 80033dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e0:	4621      	mov	r1, r4
 80033e2:	028a      	lsls	r2, r1, #10
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	61fa      	str	r2, [r7, #28]
 80033f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f4:	f7fd fbac 	bl	8000b50 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4613      	mov	r3, r2
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x204>)
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003424:	4618      	mov	r0, r3
 8003426:	3750      	adds	r7, #80	; 0x50
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	007a1200 	.word	0x007a1200

0800343c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_GetHCLKFreq+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000028 	.word	0x20000028

08003454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003458:	f7ff fff0 	bl	800343c <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	08006318 	.word	0x08006318

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003480:	f7ff ffdc 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0b5b      	lsrs	r3, r3, #13
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	08006318 	.word	0x08006318

080034a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e041      	b.n	800353a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fb16 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f001 f834 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e03c      	b.n	80035d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_TIM_Base_Start+0xa0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_TIM_Base_Start+0x5c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d013      	beq.n	80035a0 <HAL_TIM_Base_Start+0x5c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIM_Base_Start+0xa4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_TIM_Base_Start+0x5c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a19      	ldr	r2, [pc, #100]	; (80035ec <HAL_TIM_Base_Start+0xa8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_TIM_Base_Start+0x5c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIM_Base_Start+0xac>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_Base_Start+0x5c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_Base_Start+0xb0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d111      	bne.n	80035c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d010      	beq.n	80035d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	e007      	b.n	80035d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e044      	b.n	800369a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f839 	bl	800375a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 ff28 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_TIM_PWM_Start+0x24>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e022      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d109      	bne.n	80037ae <HAL_TIM_PWM_Start+0x3e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e015      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d109      	bne.n	80037c8 <HAL_TIM_PWM_Start+0x58>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e008      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e068      	b.n	80038b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0x82>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0x92>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003800:	e00b      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	e003      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fa58 	bl	8004cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_TIM_PWM_Start+0x14c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d107      	bne.n	8003842 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_TIM_PWM_Start+0x14c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d013      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_TIM_PWM_Start+0x150>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_TIM_PWM_Start+0x154>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <HAL_TIM_PWM_Start+0x158>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_TIM_PWM_Start+0x15c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d111      	bne.n	80038a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b06      	cmp	r3, #6
 800388e:	d010      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	e007      	b.n	80038b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40014000 	.word	0x40014000

080038d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e041      	b.n	8003966 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f839 	bl	800396e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 fe1e 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_IC_Start_DMA+0x22>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e013      	b.n	80039ce <HAL_TIM_IC_Start_DMA+0x4a>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_IC_Start_DMA+0x32>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	e00b      	b.n	80039ce <HAL_TIM_IC_Start_DMA+0x4a>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_IC_Start_DMA+0x42>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e003      	b.n	80039ce <HAL_TIM_IC_Start_DMA+0x4a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d104      	bne.n	80039e0 <HAL_TIM_IC_Start_DMA+0x5c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e013      	b.n	8003a08 <HAL_TIM_IC_Start_DMA+0x84>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d104      	bne.n	80039f0 <HAL_TIM_IC_Start_DMA+0x6c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e00b      	b.n	8003a08 <HAL_TIM_IC_Start_DMA+0x84>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d104      	bne.n	8003a00 <HAL_TIM_IC_Start_DMA+0x7c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e003      	b.n	8003a08 <HAL_TIM_IC_Start_DMA+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a0a:	7dbb      	ldrb	r3, [r7, #22]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d002      	beq.n	8003a16 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003a10:	7d7b      	ldrb	r3, [r7, #21]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	e13c      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	7dbb      	ldrb	r3, [r7, #22]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d143      	bne.n	8003aa8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003a20:	7d7b      	ldrb	r3, [r7, #21]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d140      	bne.n	8003aa8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_IC_Start_DMA+0xb2>
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12e      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_IC_Start_DMA+0xc2>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a44:	e013      	b.n	8003a6e <HAL_TIM_IC_Start_DMA+0xea>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_IC_Start_DMA+0xd2>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a54:	e00b      	b.n	8003a6e <HAL_TIM_IC_Start_DMA+0xea>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_IC_Start_DMA+0xe2>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	e003      	b.n	8003a6e <HAL_TIM_IC_Start_DMA+0xea>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_IC_Start_DMA+0xfa>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003a7c:	e016      	b.n	8003aac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start_DMA+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003a8c:	e00e      	b.n	8003aac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Start_DMA+0x11a>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003a9c:	e006      	b.n	8003aac <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003aa6:	e001      	b.n	8003aac <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0f3      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f90f 	bl	8004cd8 <TIM_CCxChannelCmd>

  switch (Channel)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	f200 80ad 	bhi.w	8003c1c <HAL_TIM_IC_Start_DMA+0x298>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_TIM_IC_Start_DMA+0x144>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003c1d 	.word	0x08003c1d
 8003ad0:	08003c1d 	.word	0x08003c1d
 8003ad4:	08003c1d 	.word	0x08003c1d
 8003ad8:	08003b45 	.word	0x08003b45
 8003adc:	08003c1d 	.word	0x08003c1d
 8003ae0:	08003c1d 	.word	0x08003c1d
 8003ae4:	08003c1d 	.word	0x08003c1d
 8003ae8:	08003b8d 	.word	0x08003b8d
 8003aec:	08003c1d 	.word	0x08003c1d
 8003af0:	08003c1d 	.word	0x08003c1d
 8003af4:	08003c1d 	.word	0x08003c1d
 8003af8:	08003bd5 	.word	0x08003bd5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	4a66      	ldr	r2, [pc, #408]	; (8003c9c <HAL_TIM_IC_Start_DMA+0x318>)
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	4a65      	ldr	r2, [pc, #404]	; (8003ca0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	4a64      	ldr	r2, [pc, #400]	; (8003ca4 <HAL_TIM_IC_Start_DMA+0x320>)
 8003b12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3334      	adds	r3, #52	; 0x34
 8003b1e:	4619      	mov	r1, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	f7fe fbc6 	bl	80022b4 <HAL_DMA_Start_IT>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0b0      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b40:	60da      	str	r2, [r3, #12]
      break;
 8003b42:	e06e      	b.n	8003c22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	4a54      	ldr	r2, [pc, #336]	; (8003c9c <HAL_TIM_IC_Start_DMA+0x318>)
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	4a53      	ldr	r2, [pc, #332]	; (8003ca0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_TIM_IC_Start_DMA+0x320>)
 8003b5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3338      	adds	r3, #56	; 0x38
 8003b66:	4619      	mov	r1, r3
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	f7fe fba2 	bl	80022b4 <HAL_DMA_Start_IT>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08c      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b88:	60da      	str	r2, [r3, #12]
      break;
 8003b8a:	e04a      	b.n	8003c22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a42      	ldr	r2, [pc, #264]	; (8003c9c <HAL_TIM_IC_Start_DMA+0x318>)
 8003b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a41      	ldr	r2, [pc, #260]	; (8003ca0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <HAL_TIM_IC_Start_DMA+0x320>)
 8003ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	333c      	adds	r3, #60	; 0x3c
 8003bae:	4619      	mov	r1, r3
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	f7fe fb7e 	bl	80022b4 <HAL_DMA_Start_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e068      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd0:	60da      	str	r2, [r3, #12]
      break;
 8003bd2:	e026      	b.n	8003c22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <HAL_TIM_IC_Start_DMA+0x318>)
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_TIM_IC_Start_DMA+0x320>)
 8003bea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3340      	adds	r3, #64	; 0x40
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	f7fe fb5a 	bl	80022b4 <HAL_DMA_Start_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e044      	b.n	8003c94 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c18:	60da      	str	r2, [r3, #12]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c20:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <HAL_TIM_IC_Start_DMA+0x324>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_TIM_IC_Start_DMA+0x2da>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d013      	beq.n	8003c5e <HAL_TIM_IC_Start_DMA+0x2da>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <HAL_TIM_IC_Start_DMA+0x328>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_TIM_IC_Start_DMA+0x2da>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_TIM_IC_Start_DMA+0x2da>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_TIM_IC_Start_DMA+0x330>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_TIM_IC_Start_DMA+0x2da>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_TIM_IC_Start_DMA+0x334>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d010      	beq.n	8003c92 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	e007      	b.n	8003c92 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08004421 	.word	0x08004421
 8003ca0:	080044e9 	.word	0x080044e9
 8003ca4:	0800438f 	.word	0x0800438f
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40014000 	.word	0x40014000

08003cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0202 	mvn.w	r2, #2
 8003ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fb13 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fb05 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb20 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0204 	mvn.w	r2, #4
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fae9 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fadb 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 faf6 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0208 	mvn.w	r2, #8
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fabf 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fab1 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 facc 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2208      	movs	r2, #8
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa95 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa87 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 faa2 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0201 	mvn.w	r2, #1
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fada 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f001 f826 	bl	8004eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa67 	bl	8004366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0220 	mvn.w	r2, #32
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fff0 	bl	8004ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e088      	b.n	8003ffc <HAL_TIM_IC_ConfigChannel+0x130>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f000 fd2e 	bl	8004968 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 020c 	bic.w	r2, r2, #12
 8003f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6999      	ldr	r1, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	619a      	str	r2, [r3, #24]
 8003f2e:	e060      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d11c      	bne.n	8003f70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f000 fda6 	bl	8004a96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]
 8003f6e:	e040      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d11b      	bne.n	8003fae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f000 fdf3 	bl	8004b70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 020c 	bic.w	r2, r2, #12
 8003f98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
 8003fac:	e021      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d11c      	bne.n	8003fee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f000 fe10 	bl	8004be8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69d9      	ldr	r1, [r3, #28]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	61da      	str	r2, [r3, #28]
 8003fec:	e001      	b.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ae      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	f200 809f 	bhi.w	8004170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800406d 	.word	0x0800406d
 800403c:	08004171 	.word	0x08004171
 8004040:	08004171 	.word	0x08004171
 8004044:	08004171 	.word	0x08004171
 8004048:	080040ad 	.word	0x080040ad
 800404c:	08004171 	.word	0x08004171
 8004050:	08004171 	.word	0x08004171
 8004054:	08004171 	.word	0x08004171
 8004058:	080040ef 	.word	0x080040ef
 800405c:	08004171 	.word	0x08004171
 8004060:	08004171 	.word	0x08004171
 8004064:	08004171 	.word	0x08004171
 8004068:	0800412f 	.word	0x0800412f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 faec 	bl	8004650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]
      break;
 80040aa:	e064      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb32 	bl	800471c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
      break;
 80040ec:	e043      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fb7d 	bl	80047f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0208 	orr.w	r2, r2, #8
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0204 	bic.w	r2, r2, #4
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
      break;
 800412c:	e023      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fbc7 	bl	80048c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69d9      	ldr	r1, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
      break;
 800416e:	e002      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b4      	b.n	800430e <HAL_TIM_ConfigClockSource+0x186>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd4>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x172>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa6>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfa>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f000 fd2b 	bl	8004c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 fd14 	bl	8004c98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fbd2 	bl	8004a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	; 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fce1 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 fc2e 	bl	8004b10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	; 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fcd1 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fbb2 	bl	8004a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fcc1 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fcb8 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d107      	bne.n	80043b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b4:	e02a      	b.n	800440c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2202      	movs	r2, #2
 80043c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ce:	e01d      	b.n	800440c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d107      	bne.n	80043ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2204      	movs	r2, #4
 80043de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	e010      	b.n	800440c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d107      	bne.n	8004404 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2208      	movs	r2, #8
 80043f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004402:	e003      	b.n	800440c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ffb4 	bl	800437a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d10f      	bne.n	8004458 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d146      	bne.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004456:	e03d      	b.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10f      	bne.n	8004482 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2202      	movs	r2, #2
 8004466:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d131      	bne.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004480:	e028      	b.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d10f      	bne.n	80044ac <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2204      	movs	r2, #4
 8004490:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11c      	bne.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044aa:	e013      	b.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d10e      	bne.n	80044d4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2208      	movs	r2, #8
 80044ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff ff28 	bl	800432a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d103      	bne.n	8004508 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	771a      	strb	r2, [r3, #28]
 8004506:	e019      	b.n	800453c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d103      	bne.n	800451a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2202      	movs	r2, #2
 8004516:	771a      	strb	r2, [r3, #28]
 8004518:	e010      	b.n	800453c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d103      	bne.n	800452c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2204      	movs	r2, #4
 8004528:	771a      	strb	r2, [r3, #28]
 800452a:	e007      	b.n	800453c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d102      	bne.n	800453c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2208      	movs	r2, #8
 800453a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fefe 	bl	800433e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a34      	ldr	r2, [pc, #208]	; (8004634 <TIM_Base_SetConfig+0xe4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00f      	beq.n	8004588 <TIM_Base_SetConfig+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x38>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <TIM_Base_SetConfig+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x38>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a30      	ldr	r2, [pc, #192]	; (800463c <TIM_Base_SetConfig+0xec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x38>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <TIM_Base_SetConfig+0xf0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a25      	ldr	r2, [pc, #148]	; (8004634 <TIM_Base_SetConfig+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a22      	ldr	r2, [pc, #136]	; (8004638 <TIM_Base_SetConfig+0xe8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a21      	ldr	r2, [pc, #132]	; (800463c <TIM_Base_SetConfig+0xec>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <TIM_Base_SetConfig+0xf0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <TIM_Base_SetConfig+0xf4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <TIM_Base_SetConfig+0xf8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <TIM_Base_SetConfig+0xfc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a08      	ldr	r2, [pc, #32]	; (8004634 <TIM_Base_SetConfig+0xe4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d103      	bne.n	8004620 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	615a      	str	r2, [r3, #20]
}
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800

08004650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <TIM_OC1_SetConfig+0xc8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10c      	bne.n	80046c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0308 	bic.w	r3, r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <TIM_OC1_SetConfig+0xc8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40010000 	.word	0x40010000

0800471c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0320 	bic.w	r3, r3, #32
 8004766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <TIM_OC2_SetConfig+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10d      	bne.n	8004798 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <TIM_OC2_SetConfig+0xd4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d113      	bne.n	80047c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000

080047f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <TIM_OC3_SetConfig+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <TIM_OC3_SetConfig+0xd0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d113      	bne.n	800489e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800487c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40010000 	.word	0x40010000

080048c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <TIM_OC4_SetConfig+0x9c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d109      	bne.n	800493c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000

08004968 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0201 	bic.w	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <TIM_TI1_SetConfig+0xbc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_TI1_SetConfig+0x56>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d00f      	beq.n	80049be <TIM_TI1_SetConfig+0x56>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <TIM_TI1_SetConfig+0xc0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_TI1_SetConfig+0x56>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <TIM_TI1_SetConfig+0xc4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_TI1_SetConfig+0x56>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <TIM_TI1_SetConfig+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_TI1_SetConfig+0x56>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <TIM_TI1_SetConfig+0xcc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <TIM_TI1_SetConfig+0x5a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <TIM_TI1_SetConfig+0x5c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e003      	b.n	80049e2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 030a 	bic.w	r3, r3, #10
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f003 030a 	and.w	r3, r3, #10
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40014000 	.word	0x40014000

08004a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 030a 	bic.w	r3, r3, #10
 8004a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f023 0210 	bic.w	r2, r3, #16
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 0210 	bic.w	r2, r3, #16
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	031b      	lsls	r3, r3, #12
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	621a      	str	r2, [r3, #32]
}
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f043 0307 	orr.w	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	2201      	movs	r2, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1a      	ldr	r2, [r3, #32]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e050      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d013      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e03d      	b.n	8004e98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e03f      	b.n	8004f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc feea 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2224      	movs	r2, #36	; 0x24
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f829 	bl	8004f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f6c:	b0c0      	sub	sp, #256	; 0x100
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	68d9      	ldr	r1, [r3, #12]
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	ea40 0301 	orr.w	r3, r0, r1
 8004f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fc0:	f021 010c 	bic.w	r1, r1, #12
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	6999      	ldr	r1, [r3, #24]
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	ea40 0301 	orr.w	r3, r0, r1
 8004fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b8f      	ldr	r3, [pc, #572]	; (8005234 <UART_SetConfig+0x2cc>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d005      	beq.n	8005008 <UART_SetConfig+0xa0>
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <UART_SetConfig+0x2d0>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d104      	bne.n	8005012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005008:	f7fe fa38 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 800500c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005010:	e003      	b.n	800501a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005012:	f7fe fa1f 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8005016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005024:	f040 810c 	bne.w	8005240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502c:	2200      	movs	r2, #0
 800502e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800503a:	4622      	mov	r2, r4
 800503c:	462b      	mov	r3, r5
 800503e:	1891      	adds	r1, r2, r2
 8005040:	65b9      	str	r1, [r7, #88]	; 0x58
 8005042:	415b      	adcs	r3, r3
 8005044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800504a:	4621      	mov	r1, r4
 800504c:	eb12 0801 	adds.w	r8, r2, r1
 8005050:	4629      	mov	r1, r5
 8005052:	eb43 0901 	adc.w	r9, r3, r1
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800506a:	4690      	mov	r8, r2
 800506c:	4699      	mov	r9, r3
 800506e:	4623      	mov	r3, r4
 8005070:	eb18 0303 	adds.w	r3, r8, r3
 8005074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005078:	462b      	mov	r3, r5
 800507a:	eb49 0303 	adc.w	r3, r9, r3
 800507e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800508e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005096:	460b      	mov	r3, r1
 8005098:	18db      	adds	r3, r3, r3
 800509a:	653b      	str	r3, [r7, #80]	; 0x50
 800509c:	4613      	mov	r3, r2
 800509e:	eb42 0303 	adc.w	r3, r2, r3
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54
 80050a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050ac:	f7fb fd50 	bl	8000b50 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4b61      	ldr	r3, [pc, #388]	; (800523c <UART_SetConfig+0x2d4>)
 80050b6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	011c      	lsls	r4, r3, #4
 80050be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80050d8:	415b      	adcs	r3, r3
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050e0:	4641      	mov	r1, r8
 80050e2:	eb12 0a01 	adds.w	sl, r2, r1
 80050e6:	4649      	mov	r1, r9
 80050e8:	eb43 0b01 	adc.w	fp, r3, r1
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005100:	4692      	mov	sl, r2
 8005102:	469b      	mov	fp, r3
 8005104:	4643      	mov	r3, r8
 8005106:	eb1a 0303 	adds.w	r3, sl, r3
 800510a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800510e:	464b      	mov	r3, r9
 8005110:	eb4b 0303 	adc.w	r3, fp, r3
 8005114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800512c:	460b      	mov	r3, r1
 800512e:	18db      	adds	r3, r3, r3
 8005130:	643b      	str	r3, [r7, #64]	; 0x40
 8005132:	4613      	mov	r3, r2
 8005134:	eb42 0303 	adc.w	r3, r2, r3
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
 800513a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005142:	f7fb fd05 	bl	8000b50 <__aeabi_uldivmod>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4611      	mov	r1, r2
 800514c:	4b3b      	ldr	r3, [pc, #236]	; (800523c <UART_SetConfig+0x2d4>)
 800514e:	fba3 2301 	umull	r2, r3, r3, r1
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	2264      	movs	r2, #100	; 0x64
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	1acb      	subs	r3, r1, r3
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <UART_SetConfig+0x2d4>)
 8005164:	fba3 2302 	umull	r2, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005170:	441c      	add	r4, r3
 8005172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005176:	2200      	movs	r2, #0
 8005178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800517c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	1891      	adds	r1, r2, r2
 800518a:	63b9      	str	r1, [r7, #56]	; 0x38
 800518c:	415b      	adcs	r3, r3
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005194:	4641      	mov	r1, r8
 8005196:	1851      	adds	r1, r2, r1
 8005198:	6339      	str	r1, [r7, #48]	; 0x30
 800519a:	4649      	mov	r1, r9
 800519c:	414b      	adcs	r3, r1
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051ac:	4659      	mov	r1, fp
 80051ae:	00cb      	lsls	r3, r1, #3
 80051b0:	4651      	mov	r1, sl
 80051b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051b6:	4651      	mov	r1, sl
 80051b8:	00ca      	lsls	r2, r1, #3
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	4642      	mov	r2, r8
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c8:	464b      	mov	r3, r9
 80051ca:	460a      	mov	r2, r1
 80051cc:	eb42 0303 	adc.w	r3, r2, r3
 80051d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051e8:	460b      	mov	r3, r1
 80051ea:	18db      	adds	r3, r3, r3
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	4613      	mov	r3, r2
 80051f0:	eb42 0303 	adc.w	r3, r2, r3
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051fe:	f7fb fca7 	bl	8000b50 <__aeabi_uldivmod>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <UART_SetConfig+0x2d4>)
 8005208:	fba3 1302 	umull	r1, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	2164      	movs	r1, #100	; 0x64
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	3332      	adds	r3, #50	; 0x32
 800521a:	4a08      	ldr	r2, [pc, #32]	; (800523c <UART_SetConfig+0x2d4>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f003 0207 	and.w	r2, r3, #7
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4422      	add	r2, r4
 800522e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005230:	e105      	b.n	800543e <UART_SetConfig+0x4d6>
 8005232:	bf00      	nop
 8005234:	40011000 	.word	0x40011000
 8005238:	40011400 	.word	0x40011400
 800523c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005244:	2200      	movs	r2, #0
 8005246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800524a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800524e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005252:	4642      	mov	r2, r8
 8005254:	464b      	mov	r3, r9
 8005256:	1891      	adds	r1, r2, r2
 8005258:	6239      	str	r1, [r7, #32]
 800525a:	415b      	adcs	r3, r3
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
 800525e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005262:	4641      	mov	r1, r8
 8005264:	1854      	adds	r4, r2, r1
 8005266:	4649      	mov	r1, r9
 8005268:	eb43 0501 	adc.w	r5, r3, r1
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	00eb      	lsls	r3, r5, #3
 8005276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800527a:	00e2      	lsls	r2, r4, #3
 800527c:	4614      	mov	r4, r2
 800527e:	461d      	mov	r5, r3
 8005280:	4643      	mov	r3, r8
 8005282:	18e3      	adds	r3, r4, r3
 8005284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005288:	464b      	mov	r3, r9
 800528a:	eb45 0303 	adc.w	r3, r5, r3
 800528e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800529e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ae:	4629      	mov	r1, r5
 80052b0:	008b      	lsls	r3, r1, #2
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b8:	4621      	mov	r1, r4
 80052ba:	008a      	lsls	r2, r1, #2
 80052bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052c0:	f7fb fc46 	bl	8000b50 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4b60      	ldr	r3, [pc, #384]	; (800544c <UART_SetConfig+0x4e4>)
 80052ca:	fba3 2302 	umull	r2, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	011c      	lsls	r4, r3, #4
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	61b9      	str	r1, [r7, #24]
 80052ec:	415b      	adcs	r3, r3
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f4:	4641      	mov	r1, r8
 80052f6:	1851      	adds	r1, r2, r1
 80052f8:	6139      	str	r1, [r7, #16]
 80052fa:	4649      	mov	r1, r9
 80052fc:	414b      	adcs	r3, r1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800530c:	4659      	mov	r1, fp
 800530e:	00cb      	lsls	r3, r1, #3
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005316:	4651      	mov	r1, sl
 8005318:	00ca      	lsls	r2, r1, #3
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	4603      	mov	r3, r0
 8005320:	4642      	mov	r2, r8
 8005322:	189b      	adds	r3, r3, r2
 8005324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005328:	464b      	mov	r3, r9
 800532a:	460a      	mov	r2, r1
 800532c:	eb42 0303 	adc.w	r3, r2, r3
 8005330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	67bb      	str	r3, [r7, #120]	; 0x78
 800533e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800534c:	4649      	mov	r1, r9
 800534e:	008b      	lsls	r3, r1, #2
 8005350:	4641      	mov	r1, r8
 8005352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005356:	4641      	mov	r1, r8
 8005358:	008a      	lsls	r2, r1, #2
 800535a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800535e:	f7fb fbf7 	bl	8000b50 <__aeabi_uldivmod>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4b39      	ldr	r3, [pc, #228]	; (800544c <UART_SetConfig+0x4e4>)
 8005368:	fba3 1302 	umull	r1, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	2164      	movs	r1, #100	; 0x64
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	3332      	adds	r3, #50	; 0x32
 800537a:	4a34      	ldr	r2, [pc, #208]	; (800544c <UART_SetConfig+0x4e4>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005386:	441c      	add	r4, r3
 8005388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538c:	2200      	movs	r2, #0
 800538e:	673b      	str	r3, [r7, #112]	; 0x70
 8005390:	677a      	str	r2, [r7, #116]	; 0x74
 8005392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005396:	4642      	mov	r2, r8
 8005398:	464b      	mov	r3, r9
 800539a:	1891      	adds	r1, r2, r2
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	415b      	adcs	r3, r3
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a6:	4641      	mov	r1, r8
 80053a8:	1851      	adds	r1, r2, r1
 80053aa:	6039      	str	r1, [r7, #0]
 80053ac:	4649      	mov	r1, r9
 80053ae:	414b      	adcs	r3, r1
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053be:	4659      	mov	r1, fp
 80053c0:	00cb      	lsls	r3, r1, #3
 80053c2:	4651      	mov	r1, sl
 80053c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c8:	4651      	mov	r1, sl
 80053ca:	00ca      	lsls	r2, r1, #3
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	4642      	mov	r2, r8
 80053d4:	189b      	adds	r3, r3, r2
 80053d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	663b      	str	r3, [r7, #96]	; 0x60
 80053ec:	667a      	str	r2, [r7, #100]	; 0x64
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053fa:	4649      	mov	r1, r9
 80053fc:	008b      	lsls	r3, r1, #2
 80053fe:	4641      	mov	r1, r8
 8005400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005404:	4641      	mov	r1, r8
 8005406:	008a      	lsls	r2, r1, #2
 8005408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800540c:	f7fb fba0 	bl	8000b50 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <UART_SetConfig+0x4e4>)
 8005416:	fba3 1302 	umull	r1, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2164      	movs	r1, #100	; 0x64
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	; 0x32
 8005428:	4a08      	ldr	r2, [pc, #32]	; (800544c <UART_SetConfig+0x4e4>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4422      	add	r2, r4
 800543c:	609a      	str	r2, [r3, #8]
}
 800543e:	bf00      	nop
 8005440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	51eb851f 	.word	0x51eb851f

08005450 <__errno>:
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <__errno+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000034 	.word	0x20000034

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4d0d      	ldr	r5, [pc, #52]	; (8005494 <__libc_init_array+0x38>)
 8005460:	4c0d      	ldr	r4, [pc, #52]	; (8005498 <__libc_init_array+0x3c>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	2600      	movs	r6, #0
 8005468:	42a6      	cmp	r6, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	4d0b      	ldr	r5, [pc, #44]	; (800549c <__libc_init_array+0x40>)
 800546e:	4c0c      	ldr	r4, [pc, #48]	; (80054a0 <__libc_init_array+0x44>)
 8005470:	f000 ff3c 	bl	80062ec <_init>
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	2600      	movs	r6, #0
 800547a:	42a6      	cmp	r6, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f855 3b04 	ldr.w	r3, [r5], #4
 8005484:	4798      	blx	r3
 8005486:	3601      	adds	r6, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f855 3b04 	ldr.w	r3, [r5], #4
 800548e:	4798      	blx	r3
 8005490:	3601      	adds	r6, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08006360 	.word	0x08006360
 8005498:	08006360 	.word	0x08006360
 800549c:	08006360 	.word	0x08006360
 80054a0:	08006364 	.word	0x08006364

080054a4 <memset>:
 80054a4:	4402      	add	r2, r0
 80054a6:	4603      	mov	r3, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d100      	bne.n	80054ae <memset+0xa>
 80054ac:	4770      	bx	lr
 80054ae:	f803 1b01 	strb.w	r1, [r3], #1
 80054b2:	e7f9      	b.n	80054a8 <memset+0x4>

080054b4 <pow>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	ed2d 8b02 	vpush	{d8}
 80054ba:	eeb0 8a40 	vmov.f32	s16, s0
 80054be:	eef0 8a60 	vmov.f32	s17, s1
 80054c2:	ec55 4b11 	vmov	r4, r5, d1
 80054c6:	f000 f867 	bl	8005598 <__ieee754_pow>
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	ec57 6b10 	vmov	r6, r7, d0
 80054d6:	f7fb fad5 	bl	8000a84 <__aeabi_dcmpun>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d13b      	bne.n	8005556 <pow+0xa2>
 80054de:	ec51 0b18 	vmov	r0, r1, d8
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	f7fb fa9b 	bl	8000a20 <__aeabi_dcmpeq>
 80054ea:	b1b8      	cbz	r0, 800551c <pow+0x68>
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fb fa94 	bl	8000a20 <__aeabi_dcmpeq>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d146      	bne.n	800558a <pow+0xd6>
 80054fc:	ec45 4b10 	vmov	d0, r4, r5
 8005500:	f000 fe63 	bl	80061ca <finite>
 8005504:	b338      	cbz	r0, 8005556 <pow+0xa2>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fb fa91 	bl	8000a34 <__aeabi_dcmplt>
 8005512:	b300      	cbz	r0, 8005556 <pow+0xa2>
 8005514:	f7ff ff9c 	bl	8005450 <__errno>
 8005518:	2322      	movs	r3, #34	; 0x22
 800551a:	e01b      	b.n	8005554 <pow+0xa0>
 800551c:	ec47 6b10 	vmov	d0, r6, r7
 8005520:	f000 fe53 	bl	80061ca <finite>
 8005524:	b9e0      	cbnz	r0, 8005560 <pow+0xac>
 8005526:	eeb0 0a48 	vmov.f32	s0, s16
 800552a:	eef0 0a68 	vmov.f32	s1, s17
 800552e:	f000 fe4c 	bl	80061ca <finite>
 8005532:	b1a8      	cbz	r0, 8005560 <pow+0xac>
 8005534:	ec45 4b10 	vmov	d0, r4, r5
 8005538:	f000 fe47 	bl	80061ca <finite>
 800553c:	b180      	cbz	r0, 8005560 <pow+0xac>
 800553e:	4632      	mov	r2, r6
 8005540:	463b      	mov	r3, r7
 8005542:	4630      	mov	r0, r6
 8005544:	4639      	mov	r1, r7
 8005546:	f7fb fa9d 	bl	8000a84 <__aeabi_dcmpun>
 800554a:	2800      	cmp	r0, #0
 800554c:	d0e2      	beq.n	8005514 <pow+0x60>
 800554e:	f7ff ff7f 	bl	8005450 <__errno>
 8005552:	2321      	movs	r3, #33	; 0x21
 8005554:	6003      	str	r3, [r0, #0]
 8005556:	ecbd 8b02 	vpop	{d8}
 800555a:	ec47 6b10 	vmov	d0, r6, r7
 800555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005560:	2200      	movs	r2, #0
 8005562:	2300      	movs	r3, #0
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb fa5a 	bl	8000a20 <__aeabi_dcmpeq>
 800556c:	2800      	cmp	r0, #0
 800556e:	d0f2      	beq.n	8005556 <pow+0xa2>
 8005570:	eeb0 0a48 	vmov.f32	s0, s16
 8005574:	eef0 0a68 	vmov.f32	s1, s17
 8005578:	f000 fe27 	bl	80061ca <finite>
 800557c:	2800      	cmp	r0, #0
 800557e:	d0ea      	beq.n	8005556 <pow+0xa2>
 8005580:	ec45 4b10 	vmov	d0, r4, r5
 8005584:	f000 fe21 	bl	80061ca <finite>
 8005588:	e7c3      	b.n	8005512 <pow+0x5e>
 800558a:	4f01      	ldr	r7, [pc, #4]	; (8005590 <pow+0xdc>)
 800558c:	2600      	movs	r6, #0
 800558e:	e7e2      	b.n	8005556 <pow+0xa2>
 8005590:	3ff00000 	.word	0x3ff00000
 8005594:	00000000 	.word	0x00000000

08005598 <__ieee754_pow>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	ed2d 8b06 	vpush	{d8-d10}
 80055a0:	b089      	sub	sp, #36	; 0x24
 80055a2:	ed8d 1b00 	vstr	d1, [sp]
 80055a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80055aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80055ae:	ea58 0102 	orrs.w	r1, r8, r2
 80055b2:	ec57 6b10 	vmov	r6, r7, d0
 80055b6:	d115      	bne.n	80055e4 <__ieee754_pow+0x4c>
 80055b8:	19b3      	adds	r3, r6, r6
 80055ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80055be:	4152      	adcs	r2, r2
 80055c0:	4299      	cmp	r1, r3
 80055c2:	4b89      	ldr	r3, [pc, #548]	; (80057e8 <__ieee754_pow+0x250>)
 80055c4:	4193      	sbcs	r3, r2
 80055c6:	f080 84d2 	bcs.w	8005f6e <__ieee754_pow+0x9d6>
 80055ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ce:	4630      	mov	r0, r6
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7fa fe07 	bl	80001e4 <__adddf3>
 80055d6:	ec41 0b10 	vmov	d0, r0, r1
 80055da:	b009      	add	sp, #36	; 0x24
 80055dc:	ecbd 8b06 	vpop	{d8-d10}
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	4b81      	ldr	r3, [pc, #516]	; (80057ec <__ieee754_pow+0x254>)
 80055e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80055ea:	429c      	cmp	r4, r3
 80055ec:	ee10 aa10 	vmov	sl, s0
 80055f0:	463d      	mov	r5, r7
 80055f2:	dc06      	bgt.n	8005602 <__ieee754_pow+0x6a>
 80055f4:	d101      	bne.n	80055fa <__ieee754_pow+0x62>
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	d1e7      	bne.n	80055ca <__ieee754_pow+0x32>
 80055fa:	4598      	cmp	r8, r3
 80055fc:	dc01      	bgt.n	8005602 <__ieee754_pow+0x6a>
 80055fe:	d10f      	bne.n	8005620 <__ieee754_pow+0x88>
 8005600:	b172      	cbz	r2, 8005620 <__ieee754_pow+0x88>
 8005602:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005606:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800560a:	ea55 050a 	orrs.w	r5, r5, sl
 800560e:	d1dc      	bne.n	80055ca <__ieee754_pow+0x32>
 8005610:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005614:	18db      	adds	r3, r3, r3
 8005616:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800561a:	4152      	adcs	r2, r2
 800561c:	429d      	cmp	r5, r3
 800561e:	e7d0      	b.n	80055c2 <__ieee754_pow+0x2a>
 8005620:	2d00      	cmp	r5, #0
 8005622:	da3b      	bge.n	800569c <__ieee754_pow+0x104>
 8005624:	4b72      	ldr	r3, [pc, #456]	; (80057f0 <__ieee754_pow+0x258>)
 8005626:	4598      	cmp	r8, r3
 8005628:	dc51      	bgt.n	80056ce <__ieee754_pow+0x136>
 800562a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800562e:	4598      	cmp	r8, r3
 8005630:	f340 84ac 	ble.w	8005f8c <__ieee754_pow+0x9f4>
 8005634:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800563c:	2b14      	cmp	r3, #20
 800563e:	dd0f      	ble.n	8005660 <__ieee754_pow+0xc8>
 8005640:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005644:	fa22 f103 	lsr.w	r1, r2, r3
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	4293      	cmp	r3, r2
 800564e:	f040 849d 	bne.w	8005f8c <__ieee754_pow+0x9f4>
 8005652:	f001 0101 	and.w	r1, r1, #1
 8005656:	f1c1 0302 	rsb	r3, r1, #2
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	b182      	cbz	r2, 8005680 <__ieee754_pow+0xe8>
 800565e:	e05f      	b.n	8005720 <__ieee754_pow+0x188>
 8005660:	2a00      	cmp	r2, #0
 8005662:	d15b      	bne.n	800571c <__ieee754_pow+0x184>
 8005664:	f1c3 0314 	rsb	r3, r3, #20
 8005668:	fa48 f103 	asr.w	r1, r8, r3
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	4543      	cmp	r3, r8
 8005672:	f040 8488 	bne.w	8005f86 <__ieee754_pow+0x9ee>
 8005676:	f001 0101 	and.w	r1, r1, #1
 800567a:	f1c1 0302 	rsb	r3, r1, #2
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	4b5c      	ldr	r3, [pc, #368]	; (80057f4 <__ieee754_pow+0x25c>)
 8005682:	4598      	cmp	r8, r3
 8005684:	d132      	bne.n	80056ec <__ieee754_pow+0x154>
 8005686:	f1b9 0f00 	cmp.w	r9, #0
 800568a:	f280 8478 	bge.w	8005f7e <__ieee754_pow+0x9e6>
 800568e:	4959      	ldr	r1, [pc, #356]	; (80057f4 <__ieee754_pow+0x25c>)
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	2000      	movs	r0, #0
 8005696:	f7fb f885 	bl	80007a4 <__aeabi_ddiv>
 800569a:	e79c      	b.n	80055d6 <__ieee754_pow+0x3e>
 800569c:	2300      	movs	r3, #0
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d13d      	bne.n	8005720 <__ieee754_pow+0x188>
 80056a4:	4b51      	ldr	r3, [pc, #324]	; (80057ec <__ieee754_pow+0x254>)
 80056a6:	4598      	cmp	r8, r3
 80056a8:	d1ea      	bne.n	8005680 <__ieee754_pow+0xe8>
 80056aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80056ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80056b2:	ea53 030a 	orrs.w	r3, r3, sl
 80056b6:	f000 845a 	beq.w	8005f6e <__ieee754_pow+0x9d6>
 80056ba:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <__ieee754_pow+0x260>)
 80056bc:	429c      	cmp	r4, r3
 80056be:	dd08      	ble.n	80056d2 <__ieee754_pow+0x13a>
 80056c0:	f1b9 0f00 	cmp.w	r9, #0
 80056c4:	f2c0 8457 	blt.w	8005f76 <__ieee754_pow+0x9de>
 80056c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056cc:	e783      	b.n	80055d6 <__ieee754_pow+0x3e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e7e5      	b.n	800569e <__ieee754_pow+0x106>
 80056d2:	f1b9 0f00 	cmp.w	r9, #0
 80056d6:	f04f 0000 	mov.w	r0, #0
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	f6bf af7a 	bge.w	80055d6 <__ieee754_pow+0x3e>
 80056e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80056e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80056ea:	e774      	b.n	80055d6 <__ieee754_pow+0x3e>
 80056ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80056f0:	d106      	bne.n	8005700 <__ieee754_pow+0x168>
 80056f2:	4632      	mov	r2, r6
 80056f4:	463b      	mov	r3, r7
 80056f6:	4630      	mov	r0, r6
 80056f8:	4639      	mov	r1, r7
 80056fa:	f7fa ff29 	bl	8000550 <__aeabi_dmul>
 80056fe:	e76a      	b.n	80055d6 <__ieee754_pow+0x3e>
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <__ieee754_pow+0x264>)
 8005702:	4599      	cmp	r9, r3
 8005704:	d10c      	bne.n	8005720 <__ieee754_pow+0x188>
 8005706:	2d00      	cmp	r5, #0
 8005708:	db0a      	blt.n	8005720 <__ieee754_pow+0x188>
 800570a:	ec47 6b10 	vmov	d0, r6, r7
 800570e:	b009      	add	sp, #36	; 0x24
 8005710:	ecbd 8b06 	vpop	{d8-d10}
 8005714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	f000 bc6c 	b.w	8005ff4 <__ieee754_sqrt>
 800571c:	2300      	movs	r3, #0
 800571e:	9304      	str	r3, [sp, #16]
 8005720:	ec47 6b10 	vmov	d0, r6, r7
 8005724:	f000 fd48 	bl	80061b8 <fabs>
 8005728:	ec51 0b10 	vmov	r0, r1, d0
 800572c:	f1ba 0f00 	cmp.w	sl, #0
 8005730:	d129      	bne.n	8005786 <__ieee754_pow+0x1ee>
 8005732:	b124      	cbz	r4, 800573e <__ieee754_pow+0x1a6>
 8005734:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <__ieee754_pow+0x25c>)
 8005736:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800573a:	429a      	cmp	r2, r3
 800573c:	d123      	bne.n	8005786 <__ieee754_pow+0x1ee>
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	da05      	bge.n	8005750 <__ieee754_pow+0x1b8>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	2000      	movs	r0, #0
 800574a:	492a      	ldr	r1, [pc, #168]	; (80057f4 <__ieee754_pow+0x25c>)
 800574c:	f7fb f82a 	bl	80007a4 <__aeabi_ddiv>
 8005750:	2d00      	cmp	r5, #0
 8005752:	f6bf af40 	bge.w	80055d6 <__ieee754_pow+0x3e>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800575c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005760:	4323      	orrs	r3, r4
 8005762:	d108      	bne.n	8005776 <__ieee754_pow+0x1de>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f7fa fd38 	bl	80001e0 <__aeabi_dsub>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	e78f      	b.n	8005696 <__ieee754_pow+0xfe>
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f47f af2c 	bne.w	80055d6 <__ieee754_pow+0x3e>
 800577e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005782:	4619      	mov	r1, r3
 8005784:	e727      	b.n	80055d6 <__ieee754_pow+0x3e>
 8005786:	0feb      	lsrs	r3, r5, #31
 8005788:	3b01      	subs	r3, #1
 800578a:	9306      	str	r3, [sp, #24]
 800578c:	9a06      	ldr	r2, [sp, #24]
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	d102      	bne.n	800579a <__ieee754_pow+0x202>
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	e7e6      	b.n	8005768 <__ieee754_pow+0x1d0>
 800579a:	4b19      	ldr	r3, [pc, #100]	; (8005800 <__ieee754_pow+0x268>)
 800579c:	4598      	cmp	r8, r3
 800579e:	f340 80fb 	ble.w	8005998 <__ieee754_pow+0x400>
 80057a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80057a6:	4598      	cmp	r8, r3
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <__ieee754_pow+0x260>)
 80057aa:	dd0c      	ble.n	80057c6 <__ieee754_pow+0x22e>
 80057ac:	429c      	cmp	r4, r3
 80057ae:	dc0f      	bgt.n	80057d0 <__ieee754_pow+0x238>
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	da0f      	bge.n	80057d6 <__ieee754_pow+0x23e>
 80057b6:	2000      	movs	r0, #0
 80057b8:	b009      	add	sp, #36	; 0x24
 80057ba:	ecbd 8b06 	vpop	{d8-d10}
 80057be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c2:	f000 bcf0 	b.w	80061a6 <__math_oflow>
 80057c6:	429c      	cmp	r4, r3
 80057c8:	dbf2      	blt.n	80057b0 <__ieee754_pow+0x218>
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <__ieee754_pow+0x25c>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	dd19      	ble.n	8005804 <__ieee754_pow+0x26c>
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	dcef      	bgt.n	80057b6 <__ieee754_pow+0x21e>
 80057d6:	2000      	movs	r0, #0
 80057d8:	b009      	add	sp, #36	; 0x24
 80057da:	ecbd 8b06 	vpop	{d8-d10}
 80057de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e2:	f000 bcd7 	b.w	8006194 <__math_uflow>
 80057e6:	bf00      	nop
 80057e8:	fff00000 	.word	0xfff00000
 80057ec:	7ff00000 	.word	0x7ff00000
 80057f0:	433fffff 	.word	0x433fffff
 80057f4:	3ff00000 	.word	0x3ff00000
 80057f8:	3fefffff 	.word	0x3fefffff
 80057fc:	3fe00000 	.word	0x3fe00000
 8005800:	41e00000 	.word	0x41e00000
 8005804:	4b60      	ldr	r3, [pc, #384]	; (8005988 <__ieee754_pow+0x3f0>)
 8005806:	2200      	movs	r2, #0
 8005808:	f7fa fcea 	bl	80001e0 <__aeabi_dsub>
 800580c:	a354      	add	r3, pc, #336	; (adr r3, 8005960 <__ieee754_pow+0x3c8>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	4604      	mov	r4, r0
 8005814:	460d      	mov	r5, r1
 8005816:	f7fa fe9b 	bl	8000550 <__aeabi_dmul>
 800581a:	a353      	add	r3, pc, #332	; (adr r3, 8005968 <__ieee754_pow+0x3d0>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	4606      	mov	r6, r0
 8005822:	460f      	mov	r7, r1
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f7fa fe92 	bl	8000550 <__aeabi_dmul>
 800582c:	4b57      	ldr	r3, [pc, #348]	; (800598c <__ieee754_pow+0x3f4>)
 800582e:	4682      	mov	sl, r0
 8005830:	468b      	mov	fp, r1
 8005832:	2200      	movs	r2, #0
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fe8a 	bl	8000550 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	a14b      	add	r1, pc, #300	; (adr r1, 8005970 <__ieee754_pow+0x3d8>)
 8005842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005846:	f7fa fccb 	bl	80001e0 <__aeabi_dsub>
 800584a:	4622      	mov	r2, r4
 800584c:	462b      	mov	r3, r5
 800584e:	f7fa fe7f 	bl	8000550 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	2000      	movs	r0, #0
 8005858:	494d      	ldr	r1, [pc, #308]	; (8005990 <__ieee754_pow+0x3f8>)
 800585a:	f7fa fcc1 	bl	80001e0 <__aeabi_dsub>
 800585e:	4622      	mov	r2, r4
 8005860:	4680      	mov	r8, r0
 8005862:	4689      	mov	r9, r1
 8005864:	462b      	mov	r3, r5
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fa fe71 	bl	8000550 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4640      	mov	r0, r8
 8005874:	4649      	mov	r1, r9
 8005876:	f7fa fe6b 	bl	8000550 <__aeabi_dmul>
 800587a:	a33f      	add	r3, pc, #252	; (adr r3, 8005978 <__ieee754_pow+0x3e0>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f7fa fe66 	bl	8000550 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4650      	mov	r0, sl
 800588a:	4659      	mov	r1, fp
 800588c:	f7fa fca8 	bl	80001e0 <__aeabi_dsub>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4680      	mov	r8, r0
 8005896:	4689      	mov	r9, r1
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fa fca2 	bl	80001e4 <__adddf3>
 80058a0:	2000      	movs	r0, #0
 80058a2:	4632      	mov	r2, r6
 80058a4:	463b      	mov	r3, r7
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	f7fa fc99 	bl	80001e0 <__aeabi_dsub>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fa fc93 	bl	80001e0 <__aeabi_dsub>
 80058ba:	9b04      	ldr	r3, [sp, #16]
 80058bc:	9a06      	ldr	r2, [sp, #24]
 80058be:	3b01      	subs	r3, #1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	4682      	mov	sl, r0
 80058c4:	468b      	mov	fp, r1
 80058c6:	f040 81e7 	bne.w	8005c98 <__ieee754_pow+0x700>
 80058ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005980 <__ieee754_pow+0x3e8>
 80058ce:	eeb0 8a47 	vmov.f32	s16, s14
 80058d2:	eef0 8a67 	vmov.f32	s17, s15
 80058d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058da:	2600      	movs	r6, #0
 80058dc:	4632      	mov	r2, r6
 80058de:	463b      	mov	r3, r7
 80058e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e4:	f7fa fc7c 	bl	80001e0 <__aeabi_dsub>
 80058e8:	4622      	mov	r2, r4
 80058ea:	462b      	mov	r3, r5
 80058ec:	f7fa fe30 	bl	8000550 <__aeabi_dmul>
 80058f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	4650      	mov	r0, sl
 80058fa:	4659      	mov	r1, fp
 80058fc:	f7fa fe28 	bl	8000550 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fc6c 	bl	80001e4 <__adddf3>
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	4680      	mov	r8, r0
 8005912:	4689      	mov	r9, r1
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fe1a 	bl	8000550 <__aeabi_dmul>
 800591c:	460b      	mov	r3, r1
 800591e:	4604      	mov	r4, r0
 8005920:	460d      	mov	r5, r1
 8005922:	4602      	mov	r2, r0
 8005924:	4649      	mov	r1, r9
 8005926:	4640      	mov	r0, r8
 8005928:	f7fa fc5c 	bl	80001e4 <__adddf3>
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <__ieee754_pow+0x3fc>)
 800592e:	4299      	cmp	r1, r3
 8005930:	ec45 4b19 	vmov	d9, r4, r5
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	468b      	mov	fp, r1
 800593a:	f340 82f1 	ble.w	8005f20 <__ieee754_pow+0x988>
 800593e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005946:	4303      	orrs	r3, r0
 8005948:	f000 81e4 	beq.w	8005d14 <__ieee754_pow+0x77c>
 800594c:	ec51 0b18 	vmov	r0, r1, d8
 8005950:	2200      	movs	r2, #0
 8005952:	2300      	movs	r3, #0
 8005954:	f7fb f86e 	bl	8000a34 <__aeabi_dcmplt>
 8005958:	3800      	subs	r0, #0
 800595a:	bf18      	it	ne
 800595c:	2001      	movne	r0, #1
 800595e:	e72b      	b.n	80057b8 <__ieee754_pow+0x220>
 8005960:	60000000 	.word	0x60000000
 8005964:	3ff71547 	.word	0x3ff71547
 8005968:	f85ddf44 	.word	0xf85ddf44
 800596c:	3e54ae0b 	.word	0x3e54ae0b
 8005970:	55555555 	.word	0x55555555
 8005974:	3fd55555 	.word	0x3fd55555
 8005978:	652b82fe 	.word	0x652b82fe
 800597c:	3ff71547 	.word	0x3ff71547
 8005980:	00000000 	.word	0x00000000
 8005984:	bff00000 	.word	0xbff00000
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	3fd00000 	.word	0x3fd00000
 8005990:	3fe00000 	.word	0x3fe00000
 8005994:	408fffff 	.word	0x408fffff
 8005998:	4bd5      	ldr	r3, [pc, #852]	; (8005cf0 <__ieee754_pow+0x758>)
 800599a:	402b      	ands	r3, r5
 800599c:	2200      	movs	r2, #0
 800599e:	b92b      	cbnz	r3, 80059ac <__ieee754_pow+0x414>
 80059a0:	4bd4      	ldr	r3, [pc, #848]	; (8005cf4 <__ieee754_pow+0x75c>)
 80059a2:	f7fa fdd5 	bl	8000550 <__aeabi_dmul>
 80059a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80059aa:	460c      	mov	r4, r1
 80059ac:	1523      	asrs	r3, r4, #20
 80059ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059b2:	4413      	add	r3, r2
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	4bd0      	ldr	r3, [pc, #832]	; (8005cf8 <__ieee754_pow+0x760>)
 80059b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80059bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059c0:	429c      	cmp	r4, r3
 80059c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059c6:	dd08      	ble.n	80059da <__ieee754_pow+0x442>
 80059c8:	4bcc      	ldr	r3, [pc, #816]	; (8005cfc <__ieee754_pow+0x764>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	f340 8162 	ble.w	8005c94 <__ieee754_pow+0x6fc>
 80059d0:	9b05      	ldr	r3, [sp, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059da:	2400      	movs	r4, #0
 80059dc:	00e3      	lsls	r3, r4, #3
 80059de:	9307      	str	r3, [sp, #28]
 80059e0:	4bc7      	ldr	r3, [pc, #796]	; (8005d00 <__ieee754_pow+0x768>)
 80059e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059e6:	ed93 7b00 	vldr	d7, [r3]
 80059ea:	4629      	mov	r1, r5
 80059ec:	ec53 2b17 	vmov	r2, r3, d7
 80059f0:	eeb0 9a47 	vmov.f32	s18, s14
 80059f4:	eef0 9a67 	vmov.f32	s19, s15
 80059f8:	4682      	mov	sl, r0
 80059fa:	f7fa fbf1 	bl	80001e0 <__aeabi_dsub>
 80059fe:	4652      	mov	r2, sl
 8005a00:	4606      	mov	r6, r0
 8005a02:	460f      	mov	r7, r1
 8005a04:	462b      	mov	r3, r5
 8005a06:	ec51 0b19 	vmov	r0, r1, d9
 8005a0a:	f7fa fbeb 	bl	80001e4 <__adddf3>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	2000      	movs	r0, #0
 8005a14:	49bb      	ldr	r1, [pc, #748]	; (8005d04 <__ieee754_pow+0x76c>)
 8005a16:	f7fa fec5 	bl	80007a4 <__aeabi_ddiv>
 8005a1a:	ec41 0b1a 	vmov	d10, r0, r1
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fa fd93 	bl	8000550 <__aeabi_dmul>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a30:	9302      	str	r3, [sp, #8]
 8005a32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a36:	46ab      	mov	fp, r5
 8005a38:	106d      	asrs	r5, r5, #1
 8005a3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a42:	ec41 0b18 	vmov	d8, r0, r1
 8005a46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4614      	mov	r4, r2
 8005a52:	461d      	mov	r5, r3
 8005a54:	f7fa fd7c 	bl	8000550 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fa fbbe 	bl	80001e0 <__aeabi_dsub>
 8005a64:	ec53 2b19 	vmov	r2, r3, d9
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fbb6 	bl	80001e0 <__aeabi_dsub>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4650      	mov	r0, sl
 8005a7a:	4659      	mov	r1, fp
 8005a7c:	f7fa fbb0 	bl	80001e0 <__aeabi_dsub>
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	f7fa fd64 	bl	8000550 <__aeabi_dmul>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fba6 	bl	80001e0 <__aeabi_dsub>
 8005a94:	ec53 2b1a 	vmov	r2, r3, d10
 8005a98:	f7fa fd5a 	bl	8000550 <__aeabi_dmul>
 8005a9c:	ec53 2b18 	vmov	r2, r3, d8
 8005aa0:	ec41 0b19 	vmov	d9, r0, r1
 8005aa4:	ec51 0b18 	vmov	r0, r1, d8
 8005aa8:	f7fa fd52 	bl	8000550 <__aeabi_dmul>
 8005aac:	a37c      	add	r3, pc, #496	; (adr r3, 8005ca0 <__ieee754_pow+0x708>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	f7fa fd4b 	bl	8000550 <__aeabi_dmul>
 8005aba:	a37b      	add	r3, pc, #492	; (adr r3, 8005ca8 <__ieee754_pow+0x710>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fb90 	bl	80001e4 <__adddf3>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	f7fa fd42 	bl	8000550 <__aeabi_dmul>
 8005acc:	a378      	add	r3, pc, #480	; (adr r3, 8005cb0 <__ieee754_pow+0x718>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fb87 	bl	80001e4 <__adddf3>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f7fa fd39 	bl	8000550 <__aeabi_dmul>
 8005ade:	a376      	add	r3, pc, #472	; (adr r3, 8005cb8 <__ieee754_pow+0x720>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa fb7e 	bl	80001e4 <__adddf3>
 8005ae8:	4622      	mov	r2, r4
 8005aea:	462b      	mov	r3, r5
 8005aec:	f7fa fd30 	bl	8000550 <__aeabi_dmul>
 8005af0:	a373      	add	r3, pc, #460	; (adr r3, 8005cc0 <__ieee754_pow+0x728>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fb75 	bl	80001e4 <__adddf3>
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fd27 	bl	8000550 <__aeabi_dmul>
 8005b02:	a371      	add	r3, pc, #452	; (adr r3, 8005cc8 <__ieee754_pow+0x730>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fb6c 	bl	80001e4 <__adddf3>
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4606      	mov	r6, r0
 8005b10:	460f      	mov	r7, r1
 8005b12:	462b      	mov	r3, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fd1a 	bl	8000550 <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4630      	mov	r0, r6
 8005b22:	4639      	mov	r1, r7
 8005b24:	f7fa fd14 	bl	8000550 <__aeabi_dmul>
 8005b28:	4642      	mov	r2, r8
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	464b      	mov	r3, r9
 8005b30:	ec51 0b18 	vmov	r0, r1, d8
 8005b34:	f7fa fb56 	bl	80001e4 <__adddf3>
 8005b38:	ec53 2b19 	vmov	r2, r3, d9
 8005b3c:	f7fa fd08 	bl	8000550 <__aeabi_dmul>
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	f7fa fb4e 	bl	80001e4 <__adddf3>
 8005b48:	4642      	mov	r2, r8
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	468b      	mov	fp, r1
 8005b4e:	464b      	mov	r3, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fa fcfc 	bl	8000550 <__aeabi_dmul>
 8005b58:	4b6b      	ldr	r3, [pc, #428]	; (8005d08 <__ieee754_pow+0x770>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	f7fa fb40 	bl	80001e4 <__adddf3>
 8005b64:	4652      	mov	r2, sl
 8005b66:	465b      	mov	r3, fp
 8005b68:	f7fa fb3c 	bl	80001e4 <__adddf3>
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4640      	mov	r0, r8
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7fa fce9 	bl	8000550 <__aeabi_dmul>
 8005b7e:	4b62      	ldr	r3, [pc, #392]	; (8005d08 <__ieee754_pow+0x770>)
 8005b80:	4680      	mov	r8, r0
 8005b82:	4689      	mov	r9, r1
 8005b84:	2200      	movs	r2, #0
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa fb29 	bl	80001e0 <__aeabi_dsub>
 8005b8e:	4632      	mov	r2, r6
 8005b90:	463b      	mov	r3, r7
 8005b92:	f7fa fb25 	bl	80001e0 <__aeabi_dsub>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	f7fa fb1f 	bl	80001e0 <__aeabi_dsub>
 8005ba2:	ec53 2b18 	vmov	r2, r3, d8
 8005ba6:	f7fa fcd3 	bl	8000550 <__aeabi_dmul>
 8005baa:	4622      	mov	r2, r4
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	ec51 0b19 	vmov	r0, r1, d9
 8005bb6:	f7fa fccb 	bl	8000550 <__aeabi_dmul>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb0f 	bl	80001e4 <__adddf3>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	f7fa fb07 	bl	80001e4 <__adddf3>
 8005bd6:	a33e      	add	r3, pc, #248	; (adr r3, 8005cd0 <__ieee754_pow+0x738>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	460d      	mov	r5, r1
 8005be2:	f7fa fcb5 	bl	8000550 <__aeabi_dmul>
 8005be6:	4642      	mov	r2, r8
 8005be8:	ec41 0b18 	vmov	d8, r0, r1
 8005bec:	464b      	mov	r3, r9
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa faf5 	bl	80001e0 <__aeabi_dsub>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa faef 	bl	80001e0 <__aeabi_dsub>
 8005c02:	a335      	add	r3, pc, #212	; (adr r3, 8005cd8 <__ieee754_pow+0x740>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fca2 	bl	8000550 <__aeabi_dmul>
 8005c0c:	a334      	add	r3, pc, #208	; (adr r3, 8005ce0 <__ieee754_pow+0x748>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fc99 	bl	8000550 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4630      	mov	r0, r6
 8005c24:	4639      	mov	r1, r7
 8005c26:	f7fa fadd 	bl	80001e4 <__adddf3>
 8005c2a:	9a07      	ldr	r2, [sp, #28]
 8005c2c:	4b37      	ldr	r3, [pc, #220]	; (8005d0c <__ieee754_pow+0x774>)
 8005c2e:	4413      	add	r3, r2
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f7fa fad6 	bl	80001e4 <__adddf3>
 8005c38:	4682      	mov	sl, r0
 8005c3a:	9805      	ldr	r0, [sp, #20]
 8005c3c:	468b      	mov	fp, r1
 8005c3e:	f7fa fc1d 	bl	800047c <__aeabi_i2d>
 8005c42:	9a07      	ldr	r2, [sp, #28]
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <__ieee754_pow+0x778>)
 8005c46:	4413      	add	r3, r2
 8005c48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	4652      	mov	r2, sl
 8005c52:	465b      	mov	r3, fp
 8005c54:	ec51 0b18 	vmov	r0, r1, d8
 8005c58:	f7fa fac4 	bl	80001e4 <__adddf3>
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	f7fa fac0 	bl	80001e4 <__adddf3>
 8005c64:	4632      	mov	r2, r6
 8005c66:	463b      	mov	r3, r7
 8005c68:	f7fa fabc 	bl	80001e4 <__adddf3>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	4632      	mov	r2, r6
 8005c70:	463b      	mov	r3, r7
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	f7fa fab3 	bl	80001e0 <__aeabi_dsub>
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	f7fa faaf 	bl	80001e0 <__aeabi_dsub>
 8005c82:	ec53 2b18 	vmov	r2, r3, d8
 8005c86:	f7fa faab 	bl	80001e0 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4650      	mov	r0, sl
 8005c90:	4659      	mov	r1, fp
 8005c92:	e610      	b.n	80058b6 <__ieee754_pow+0x31e>
 8005c94:	2401      	movs	r4, #1
 8005c96:	e6a1      	b.n	80059dc <__ieee754_pow+0x444>
 8005c98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005ce8 <__ieee754_pow+0x750>
 8005c9c:	e617      	b.n	80058ce <__ieee754_pow+0x336>
 8005c9e:	bf00      	nop
 8005ca0:	4a454eef 	.word	0x4a454eef
 8005ca4:	3fca7e28 	.word	0x3fca7e28
 8005ca8:	93c9db65 	.word	0x93c9db65
 8005cac:	3fcd864a 	.word	0x3fcd864a
 8005cb0:	a91d4101 	.word	0xa91d4101
 8005cb4:	3fd17460 	.word	0x3fd17460
 8005cb8:	518f264d 	.word	0x518f264d
 8005cbc:	3fd55555 	.word	0x3fd55555
 8005cc0:	db6fabff 	.word	0xdb6fabff
 8005cc4:	3fdb6db6 	.word	0x3fdb6db6
 8005cc8:	33333303 	.word	0x33333303
 8005ccc:	3fe33333 	.word	0x3fe33333
 8005cd0:	e0000000 	.word	0xe0000000
 8005cd4:	3feec709 	.word	0x3feec709
 8005cd8:	dc3a03fd 	.word	0xdc3a03fd
 8005cdc:	3feec709 	.word	0x3feec709
 8005ce0:	145b01f5 	.word	0x145b01f5
 8005ce4:	be3e2fe0 	.word	0xbe3e2fe0
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	3ff00000 	.word	0x3ff00000
 8005cf0:	7ff00000 	.word	0x7ff00000
 8005cf4:	43400000 	.word	0x43400000
 8005cf8:	0003988e 	.word	0x0003988e
 8005cfc:	000bb679 	.word	0x000bb679
 8005d00:	08006328 	.word	0x08006328
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	40080000 	.word	0x40080000
 8005d0c:	08006348 	.word	0x08006348
 8005d10:	08006338 	.word	0x08006338
 8005d14:	a3b5      	add	r3, pc, #724	; (adr r3, 8005fec <__ieee754_pow+0xa54>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fa61 	bl	80001e4 <__adddf3>
 8005d22:	4622      	mov	r2, r4
 8005d24:	ec41 0b1a 	vmov	d10, r0, r1
 8005d28:	462b      	mov	r3, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7fa fa57 	bl	80001e0 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	ec51 0b1a 	vmov	r0, r1, d10
 8005d3a:	f7fa fe99 	bl	8000a70 <__aeabi_dcmpgt>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f47f ae04 	bne.w	800594c <__ieee754_pow+0x3b4>
 8005d44:	4aa4      	ldr	r2, [pc, #656]	; (8005fd8 <__ieee754_pow+0xa40>)
 8005d46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	f340 8108 	ble.w	8005f60 <__ieee754_pow+0x9c8>
 8005d50:	151b      	asrs	r3, r3, #20
 8005d52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d5a:	fa4a f303 	asr.w	r3, sl, r3
 8005d5e:	445b      	add	r3, fp
 8005d60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d64:	4e9d      	ldr	r6, [pc, #628]	; (8005fdc <__ieee754_pow+0xa44>)
 8005d66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d6a:	4116      	asrs	r6, r2
 8005d6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d70:	2000      	movs	r0, #0
 8005d72:	ea23 0106 	bic.w	r1, r3, r6
 8005d76:	f1c2 0214 	rsb	r2, r2, #20
 8005d7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d7e:	fa4a fa02 	asr.w	sl, sl, r2
 8005d82:	f1bb 0f00 	cmp.w	fp, #0
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	bfb8      	it	lt
 8005d90:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d94:	f7fa fa24 	bl	80001e0 <__aeabi_dsub>
 8005d98:	ec41 0b19 	vmov	d9, r0, r1
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	ec51 0b19 	vmov	r0, r1, d9
 8005da4:	f7fa fa1e 	bl	80001e4 <__adddf3>
 8005da8:	a37b      	add	r3, pc, #492	; (adr r3, 8005f98 <__ieee754_pow+0xa00>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	2000      	movs	r0, #0
 8005db0:	4604      	mov	r4, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	f7fa fbcc 	bl	8000550 <__aeabi_dmul>
 8005db8:	ec53 2b19 	vmov	r2, r3, d9
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	460f      	mov	r7, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fa0c 	bl	80001e0 <__aeabi_dsub>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4649      	mov	r1, r9
 8005dd0:	f7fa fa06 	bl	80001e0 <__aeabi_dsub>
 8005dd4:	a372      	add	r3, pc, #456	; (adr r3, 8005fa0 <__ieee754_pow+0xa08>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa fbb9 	bl	8000550 <__aeabi_dmul>
 8005dde:	a372      	add	r3, pc, #456	; (adr r3, 8005fa8 <__ieee754_pow+0xa10>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	4680      	mov	r8, r0
 8005de6:	4689      	mov	r9, r1
 8005de8:	4620      	mov	r0, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	f7fa fbb0 	bl	8000550 <__aeabi_dmul>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4640      	mov	r0, r8
 8005df6:	4649      	mov	r1, r9
 8005df8:	f7fa f9f4 	bl	80001e4 <__adddf3>
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa f9ec 	bl	80001e4 <__adddf3>
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	4680      	mov	r8, r0
 8005e12:	4689      	mov	r9, r1
 8005e14:	f7fa f9e4 	bl	80001e0 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f7fa f9de 	bl	80001e0 <__aeabi_dsub>
 8005e24:	4642      	mov	r2, r8
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	f7fa fb8e 	bl	8000550 <__aeabi_dmul>
 8005e34:	a35e      	add	r3, pc, #376	; (adr r3, 8005fb0 <__ieee754_pow+0xa18>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	f7fa fb87 	bl	8000550 <__aeabi_dmul>
 8005e42:	a35d      	add	r3, pc, #372	; (adr r3, 8005fb8 <__ieee754_pow+0xa20>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa f9ca 	bl	80001e0 <__aeabi_dsub>
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fb7e 	bl	8000550 <__aeabi_dmul>
 8005e54:	a35a      	add	r3, pc, #360	; (adr r3, 8005fc0 <__ieee754_pow+0xa28>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa f9c3 	bl	80001e4 <__adddf3>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fb75 	bl	8000550 <__aeabi_dmul>
 8005e66:	a358      	add	r3, pc, #352	; (adr r3, 8005fc8 <__ieee754_pow+0xa30>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa f9b8 	bl	80001e0 <__aeabi_dsub>
 8005e70:	4622      	mov	r2, r4
 8005e72:	462b      	mov	r3, r5
 8005e74:	f7fa fb6c 	bl	8000550 <__aeabi_dmul>
 8005e78:	a355      	add	r3, pc, #340	; (adr r3, 8005fd0 <__ieee754_pow+0xa38>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa f9b1 	bl	80001e4 <__adddf3>
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	f7fa fb63 	bl	8000550 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa f9a5 	bl	80001e0 <__aeabi_dsub>
 8005e96:	4604      	mov	r4, r0
 8005e98:	460d      	mov	r5, r1
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fb55 	bl	8000550 <__aeabi_dmul>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	ec41 0b19 	vmov	d9, r0, r1
 8005eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa f994 	bl	80001e0 <__aeabi_dsub>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	ec51 0b19 	vmov	r0, r1, d9
 8005ec0:	f7fa fc70 	bl	80007a4 <__aeabi_ddiv>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	460d      	mov	r5, r1
 8005eca:	463b      	mov	r3, r7
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f7fa fb3e 	bl	8000550 <__aeabi_dmul>
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	f7fa f984 	bl	80001e4 <__adddf3>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f7fa f97c 	bl	80001e0 <__aeabi_dsub>
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	f7fa f978 	bl	80001e0 <__aeabi_dsub>
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	493a      	ldr	r1, [pc, #232]	; (8005fe0 <__ieee754_pow+0xa48>)
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7fa f972 	bl	80001e0 <__aeabi_dsub>
 8005efc:	ec41 0b10 	vmov	d0, r0, r1
 8005f00:	ee10 3a90 	vmov	r3, s1
 8005f04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0c:	da2b      	bge.n	8005f66 <__ieee754_pow+0x9ce>
 8005f0e:	4650      	mov	r0, sl
 8005f10:	f000 f966 	bl	80061e0 <scalbn>
 8005f14:	ec51 0b10 	vmov	r0, r1, d0
 8005f18:	ec53 2b18 	vmov	r2, r3, d8
 8005f1c:	f7ff bbed 	b.w	80056fa <__ieee754_pow+0x162>
 8005f20:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <__ieee754_pow+0xa4c>)
 8005f22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f26:	429e      	cmp	r6, r3
 8005f28:	f77f af0c 	ble.w	8005d44 <__ieee754_pow+0x7ac>
 8005f2c:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <__ieee754_pow+0xa50>)
 8005f2e:	440b      	add	r3, r1
 8005f30:	4303      	orrs	r3, r0
 8005f32:	d009      	beq.n	8005f48 <__ieee754_pow+0x9b0>
 8005f34:	ec51 0b18 	vmov	r0, r1, d8
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f7fa fd7a 	bl	8000a34 <__aeabi_dcmplt>
 8005f40:	3800      	subs	r0, #0
 8005f42:	bf18      	it	ne
 8005f44:	2001      	movne	r0, #1
 8005f46:	e447      	b.n	80057d8 <__ieee754_pow+0x240>
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	f7fa f948 	bl	80001e0 <__aeabi_dsub>
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	f7fa fd82 	bl	8000a5c <__aeabi_dcmpge>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f43f aef3 	beq.w	8005d44 <__ieee754_pow+0x7ac>
 8005f5e:	e7e9      	b.n	8005f34 <__ieee754_pow+0x99c>
 8005f60:	f04f 0a00 	mov.w	sl, #0
 8005f64:	e71a      	b.n	8005d9c <__ieee754_pow+0x804>
 8005f66:	ec51 0b10 	vmov	r0, r1, d0
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	e7d4      	b.n	8005f18 <__ieee754_pow+0x980>
 8005f6e:	491c      	ldr	r1, [pc, #112]	; (8005fe0 <__ieee754_pow+0xa48>)
 8005f70:	2000      	movs	r0, #0
 8005f72:	f7ff bb30 	b.w	80055d6 <__ieee754_pow+0x3e>
 8005f76:	2000      	movs	r0, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f7ff bb2c 	b.w	80055d6 <__ieee754_pow+0x3e>
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4639      	mov	r1, r7
 8005f82:	f7ff bb28 	b.w	80055d6 <__ieee754_pow+0x3e>
 8005f86:	9204      	str	r2, [sp, #16]
 8005f88:	f7ff bb7a 	b.w	8005680 <__ieee754_pow+0xe8>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f7ff bb64 	b.w	800565a <__ieee754_pow+0xc2>
 8005f92:	bf00      	nop
 8005f94:	f3af 8000 	nop.w
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	3fe62e43 	.word	0x3fe62e43
 8005fa0:	fefa39ef 	.word	0xfefa39ef
 8005fa4:	3fe62e42 	.word	0x3fe62e42
 8005fa8:	0ca86c39 	.word	0x0ca86c39
 8005fac:	be205c61 	.word	0xbe205c61
 8005fb0:	72bea4d0 	.word	0x72bea4d0
 8005fb4:	3e663769 	.word	0x3e663769
 8005fb8:	c5d26bf1 	.word	0xc5d26bf1
 8005fbc:	3ebbbd41 	.word	0x3ebbbd41
 8005fc0:	af25de2c 	.word	0xaf25de2c
 8005fc4:	3f11566a 	.word	0x3f11566a
 8005fc8:	16bebd93 	.word	0x16bebd93
 8005fcc:	3f66c16c 	.word	0x3f66c16c
 8005fd0:	5555553e 	.word	0x5555553e
 8005fd4:	3fc55555 	.word	0x3fc55555
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	000fffff 	.word	0x000fffff
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	4090cbff 	.word	0x4090cbff
 8005fe8:	3f6f3400 	.word	0x3f6f3400
 8005fec:	652b82fe 	.word	0x652b82fe
 8005ff0:	3c971547 	.word	0x3c971547

08005ff4 <__ieee754_sqrt>:
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	ec55 4b10 	vmov	r4, r5, d0
 8005ffc:	4e55      	ldr	r6, [pc, #340]	; (8006154 <__ieee754_sqrt+0x160>)
 8005ffe:	43ae      	bics	r6, r5
 8006000:	ee10 0a10 	vmov	r0, s0
 8006004:	ee10 3a10 	vmov	r3, s0
 8006008:	462a      	mov	r2, r5
 800600a:	4629      	mov	r1, r5
 800600c:	d110      	bne.n	8006030 <__ieee754_sqrt+0x3c>
 800600e:	ee10 2a10 	vmov	r2, s0
 8006012:	462b      	mov	r3, r5
 8006014:	f7fa fa9c 	bl	8000550 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa f8e0 	bl	80001e4 <__adddf3>
 8006024:	4604      	mov	r4, r0
 8006026:	460d      	mov	r5, r1
 8006028:	ec45 4b10 	vmov	d0, r4, r5
 800602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006030:	2d00      	cmp	r5, #0
 8006032:	dc10      	bgt.n	8006056 <__ieee754_sqrt+0x62>
 8006034:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006038:	4330      	orrs	r0, r6
 800603a:	d0f5      	beq.n	8006028 <__ieee754_sqrt+0x34>
 800603c:	b15d      	cbz	r5, 8006056 <__ieee754_sqrt+0x62>
 800603e:	ee10 2a10 	vmov	r2, s0
 8006042:	462b      	mov	r3, r5
 8006044:	ee10 0a10 	vmov	r0, s0
 8006048:	f7fa f8ca 	bl	80001e0 <__aeabi_dsub>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	f7fa fba8 	bl	80007a4 <__aeabi_ddiv>
 8006054:	e7e6      	b.n	8006024 <__ieee754_sqrt+0x30>
 8006056:	1512      	asrs	r2, r2, #20
 8006058:	d074      	beq.n	8006144 <__ieee754_sqrt+0x150>
 800605a:	07d4      	lsls	r4, r2, #31
 800605c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006060:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006068:	bf5e      	ittt	pl
 800606a:	0fda      	lsrpl	r2, r3, #31
 800606c:	005b      	lslpl	r3, r3, #1
 800606e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006072:	2400      	movs	r4, #0
 8006074:	0fda      	lsrs	r2, r3, #31
 8006076:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800607a:	107f      	asrs	r7, r7, #1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	2516      	movs	r5, #22
 8006080:	4620      	mov	r0, r4
 8006082:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006086:	1886      	adds	r6, r0, r2
 8006088:	428e      	cmp	r6, r1
 800608a:	bfde      	ittt	le
 800608c:	1b89      	suble	r1, r1, r6
 800608e:	18b0      	addle	r0, r6, r2
 8006090:	18a4      	addle	r4, r4, r2
 8006092:	0049      	lsls	r1, r1, #1
 8006094:	3d01      	subs	r5, #1
 8006096:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800609a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800609e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060a2:	d1f0      	bne.n	8006086 <__ieee754_sqrt+0x92>
 80060a4:	462a      	mov	r2, r5
 80060a6:	f04f 0e20 	mov.w	lr, #32
 80060aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80060ae:	4281      	cmp	r1, r0
 80060b0:	eb06 0c05 	add.w	ip, r6, r5
 80060b4:	dc02      	bgt.n	80060bc <__ieee754_sqrt+0xc8>
 80060b6:	d113      	bne.n	80060e0 <__ieee754_sqrt+0xec>
 80060b8:	459c      	cmp	ip, r3
 80060ba:	d811      	bhi.n	80060e0 <__ieee754_sqrt+0xec>
 80060bc:	f1bc 0f00 	cmp.w	ip, #0
 80060c0:	eb0c 0506 	add.w	r5, ip, r6
 80060c4:	da43      	bge.n	800614e <__ieee754_sqrt+0x15a>
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	db41      	blt.n	800614e <__ieee754_sqrt+0x15a>
 80060ca:	f100 0801 	add.w	r8, r0, #1
 80060ce:	1a09      	subs	r1, r1, r0
 80060d0:	459c      	cmp	ip, r3
 80060d2:	bf88      	it	hi
 80060d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80060d8:	eba3 030c 	sub.w	r3, r3, ip
 80060dc:	4432      	add	r2, r6
 80060de:	4640      	mov	r0, r8
 80060e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80060e4:	f1be 0e01 	subs.w	lr, lr, #1
 80060e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80060ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060f4:	d1db      	bne.n	80060ae <__ieee754_sqrt+0xba>
 80060f6:	430b      	orrs	r3, r1
 80060f8:	d006      	beq.n	8006108 <__ieee754_sqrt+0x114>
 80060fa:	1c50      	adds	r0, r2, #1
 80060fc:	bf13      	iteet	ne
 80060fe:	3201      	addne	r2, #1
 8006100:	3401      	addeq	r4, #1
 8006102:	4672      	moveq	r2, lr
 8006104:	f022 0201 	bicne.w	r2, r2, #1
 8006108:	1063      	asrs	r3, r4, #1
 800610a:	0852      	lsrs	r2, r2, #1
 800610c:	07e1      	lsls	r1, r4, #31
 800610e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006112:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006116:	bf48      	it	mi
 8006118:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800611c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006120:	4614      	mov	r4, r2
 8006122:	e781      	b.n	8006028 <__ieee754_sqrt+0x34>
 8006124:	0ad9      	lsrs	r1, r3, #11
 8006126:	3815      	subs	r0, #21
 8006128:	055b      	lsls	r3, r3, #21
 800612a:	2900      	cmp	r1, #0
 800612c:	d0fa      	beq.n	8006124 <__ieee754_sqrt+0x130>
 800612e:	02cd      	lsls	r5, r1, #11
 8006130:	d50a      	bpl.n	8006148 <__ieee754_sqrt+0x154>
 8006132:	f1c2 0420 	rsb	r4, r2, #32
 8006136:	fa23 f404 	lsr.w	r4, r3, r4
 800613a:	1e55      	subs	r5, r2, #1
 800613c:	4093      	lsls	r3, r2
 800613e:	4321      	orrs	r1, r4
 8006140:	1b42      	subs	r2, r0, r5
 8006142:	e78a      	b.n	800605a <__ieee754_sqrt+0x66>
 8006144:	4610      	mov	r0, r2
 8006146:	e7f0      	b.n	800612a <__ieee754_sqrt+0x136>
 8006148:	0049      	lsls	r1, r1, #1
 800614a:	3201      	adds	r2, #1
 800614c:	e7ef      	b.n	800612e <__ieee754_sqrt+0x13a>
 800614e:	4680      	mov	r8, r0
 8006150:	e7bd      	b.n	80060ce <__ieee754_sqrt+0xda>
 8006152:	bf00      	nop
 8006154:	7ff00000 	.word	0x7ff00000

08006158 <with_errno>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4604      	mov	r4, r0
 800615c:	460d      	mov	r5, r1
 800615e:	4616      	mov	r6, r2
 8006160:	f7ff f976 	bl	8005450 <__errno>
 8006164:	4629      	mov	r1, r5
 8006166:	6006      	str	r6, [r0, #0]
 8006168:	4620      	mov	r0, r4
 800616a:	bd70      	pop	{r4, r5, r6, pc}

0800616c <xflow>:
 800616c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800616e:	4614      	mov	r4, r2
 8006170:	461d      	mov	r5, r3
 8006172:	b108      	cbz	r0, 8006178 <xflow+0xc>
 8006174:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006178:	e9cd 2300 	strd	r2, r3, [sp]
 800617c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006180:	4620      	mov	r0, r4
 8006182:	4629      	mov	r1, r5
 8006184:	f7fa f9e4 	bl	8000550 <__aeabi_dmul>
 8006188:	2222      	movs	r2, #34	; 0x22
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006190:	f7ff bfe2 	b.w	8006158 <with_errno>

08006194 <__math_uflow>:
 8006194:	b508      	push	{r3, lr}
 8006196:	2200      	movs	r2, #0
 8006198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800619c:	f7ff ffe6 	bl	800616c <xflow>
 80061a0:	ec41 0b10 	vmov	d0, r0, r1
 80061a4:	bd08      	pop	{r3, pc}

080061a6 <__math_oflow>:
 80061a6:	b508      	push	{r3, lr}
 80061a8:	2200      	movs	r2, #0
 80061aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80061ae:	f7ff ffdd 	bl	800616c <xflow>
 80061b2:	ec41 0b10 	vmov	d0, r0, r1
 80061b6:	bd08      	pop	{r3, pc}

080061b8 <fabs>:
 80061b8:	ec51 0b10 	vmov	r0, r1, d0
 80061bc:	ee10 2a10 	vmov	r2, s0
 80061c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061c4:	ec43 2b10 	vmov	d0, r2, r3
 80061c8:	4770      	bx	lr

080061ca <finite>:
 80061ca:	b082      	sub	sp, #8
 80061cc:	ed8d 0b00 	vstr	d0, [sp]
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80061d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061da:	0fc0      	lsrs	r0, r0, #31
 80061dc:	b002      	add	sp, #8
 80061de:	4770      	bx	lr

080061e0 <scalbn>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	ec55 4b10 	vmov	r4, r5, d0
 80061e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061ea:	4606      	mov	r6, r0
 80061ec:	462b      	mov	r3, r5
 80061ee:	b99a      	cbnz	r2, 8006218 <scalbn+0x38>
 80061f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061f4:	4323      	orrs	r3, r4
 80061f6:	d036      	beq.n	8006266 <scalbn+0x86>
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <scalbn+0x100>)
 80061fa:	4629      	mov	r1, r5
 80061fc:	ee10 0a10 	vmov	r0, s0
 8006200:	2200      	movs	r2, #0
 8006202:	f7fa f9a5 	bl	8000550 <__aeabi_dmul>
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <scalbn+0x104>)
 8006208:	429e      	cmp	r6, r3
 800620a:	4604      	mov	r4, r0
 800620c:	460d      	mov	r5, r1
 800620e:	da10      	bge.n	8006232 <scalbn+0x52>
 8006210:	a32b      	add	r3, pc, #172	; (adr r3, 80062c0 <scalbn+0xe0>)
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	e03a      	b.n	800628e <scalbn+0xae>
 8006218:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800621c:	428a      	cmp	r2, r1
 800621e:	d10c      	bne.n	800623a <scalbn+0x5a>
 8006220:	ee10 2a10 	vmov	r2, s0
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7f9 ffdc 	bl	80001e4 <__adddf3>
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	e019      	b.n	8006266 <scalbn+0x86>
 8006232:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006236:	460b      	mov	r3, r1
 8006238:	3a36      	subs	r2, #54	; 0x36
 800623a:	4432      	add	r2, r6
 800623c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006240:	428a      	cmp	r2, r1
 8006242:	dd08      	ble.n	8006256 <scalbn+0x76>
 8006244:	2d00      	cmp	r5, #0
 8006246:	a120      	add	r1, pc, #128	; (adr r1, 80062c8 <scalbn+0xe8>)
 8006248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624c:	da1c      	bge.n	8006288 <scalbn+0xa8>
 800624e:	a120      	add	r1, pc, #128	; (adr r1, 80062d0 <scalbn+0xf0>)
 8006250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006254:	e018      	b.n	8006288 <scalbn+0xa8>
 8006256:	2a00      	cmp	r2, #0
 8006258:	dd08      	ble.n	800626c <scalbn+0x8c>
 800625a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800625e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006266:	ec45 4b10 	vmov	d0, r4, r5
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006270:	da19      	bge.n	80062a6 <scalbn+0xc6>
 8006272:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006276:	429e      	cmp	r6, r3
 8006278:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800627c:	dd0a      	ble.n	8006294 <scalbn+0xb4>
 800627e:	a112      	add	r1, pc, #72	; (adr r1, 80062c8 <scalbn+0xe8>)
 8006280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e2      	bne.n	800624e <scalbn+0x6e>
 8006288:	a30f      	add	r3, pc, #60	; (adr r3, 80062c8 <scalbn+0xe8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa f95f 	bl	8000550 <__aeabi_dmul>
 8006292:	e7cb      	b.n	800622c <scalbn+0x4c>
 8006294:	a10a      	add	r1, pc, #40	; (adr r1, 80062c0 <scalbn+0xe0>)
 8006296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0b8      	beq.n	8006210 <scalbn+0x30>
 800629e:	a10e      	add	r1, pc, #56	; (adr r1, 80062d8 <scalbn+0xf8>)
 80062a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062a4:	e7b4      	b.n	8006210 <scalbn+0x30>
 80062a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062aa:	3236      	adds	r2, #54	; 0x36
 80062ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80062b4:	4620      	mov	r0, r4
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <scalbn+0x108>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	e7e8      	b.n	800628e <scalbn+0xae>
 80062bc:	f3af 8000 	nop.w
 80062c0:	c2f8f359 	.word	0xc2f8f359
 80062c4:	01a56e1f 	.word	0x01a56e1f
 80062c8:	8800759c 	.word	0x8800759c
 80062cc:	7e37e43c 	.word	0x7e37e43c
 80062d0:	8800759c 	.word	0x8800759c
 80062d4:	fe37e43c 	.word	0xfe37e43c
 80062d8:	c2f8f359 	.word	0xc2f8f359
 80062dc:	81a56e1f 	.word	0x81a56e1f
 80062e0:	43500000 	.word	0x43500000
 80062e4:	ffff3cb0 	.word	0xffff3cb0
 80062e8:	3c900000 	.word	0x3c900000

080062ec <_init>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr

080062f8 <_fini>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr
